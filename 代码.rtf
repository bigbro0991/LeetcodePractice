{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 AppleColorEmoji;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue11;\red201\green199\blue8;\red252\green41\blue19;
\red25\green25\blue25;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c0;\cssrgb\c82582\c80870\c0;\cssrgb\c100000\c25745\c7993;
\cssrgb\c12969\c12969\c12937;\cssrgb\c100000\c100000\c100000\c0;}
\margl1440\margr1440\vieww17340\viewh15320\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 struct
\f1 \'a3\'ba
\f0 \
\

\f1 \'bd\'e1\'b9\'b9\'cc\'e5\'b4\'f3\'d0\'a1
\f0  
\f1 \'ba\'cd\'c4\'da\'b4\'e6\'b6\'d4\'c6\'eb \
Vc\'b6\'d4\'b1\'e4\'c1\'bf\'b4\'e6\'b4\'a2\'b5\'c4\'d2\'bb\'b8\'f6\'cc\'d8\'ca\'e2\'b4\'a6\'c0\'ed\'a1\'a3\'ce\'aa\'c1\'cb\'cc\'e1\'b8\'dfcpu\'b5\'c4\'b4\'e6\'b4\'a2\'cb\'d9\'b6\'c8\'a3\'acvc\'b6\'d4\'d2\'bb\'d0\'a9\'b1\'e4\'c1\'bf\'b5\'c4\'c6\'f4\'ca\'be\'b5\'d8\'d6\'b7\'bd\'f8\'d0\'d0\'a1\'b0\'b6\'d4\'c6\'eb\'a1\'b1\'a3\'acvc\'b9\'e6\'b6\'a8\'b8\'f7\'b3\'c9\'d4\'b1\'b1\'e4\'c1\'bf\'b4\'e6\'b7\'c5\'b5\'c4\'c6\'f0\'ca\'bc\'b5\'d8\'d6\'b7\'cf\'e0\'b6\'d4\'d3\'da\'bd\'e1\'b9\'b9\'cc\'e5\'b5\'c4\'c6\'f0\'ca\'bc\'b5\'d8\'d6\'b7\'b5\'c4\'c6\'ab\'d2\'c6\'c1\'bf\'b1\'d8\'d0\'eb\'ce\'aa\'b8\'c3\'b1\'e4\'c1\'bf\'b5\'c4\'c0\'e0\'d0\'cd\'cb\'f9\'d5\'bc\'d3\'c3\'d7\'d6\'bd\'da\'ca\'fd\'b5\'c4\'b1\'b6\'ca\'fd\'a3\'ac\'b2\'bb\'ca\'c7\'b5\'c4vc\'b2\'b9\'d7\'e3\'b5\'bd\'b1\'b6\'ca\'fd
\f0 \
Double 
\f1 \'cb\'ab\'be\'ab\'b6\'c8
\f0  
\f1 \'d5\'bc
\f0 8
\f1 \'d7\'d6\'bd\'da\
c++ \'bd\'e1\'b9\'b9\'cc\'e5 \'ba\'cd\'c0\'e0\'b5\'c4\'c7\'f8\'b1\'f0 \'a3\'baclass \'c4\'ac\'c8\'cf\'b5\'c4\'b3\'c9\'d4\'b1\'b7\'c3\'ce\'ca\'c8\'a8\'cf\'de\'ca\'c7private\'b5\'c4\'a3\'acstruct\'d6\'d0\'d4\'f2\'ca\'c7public\'b5\'c4\
Class\'bc\'cc\'b3\'d0\'c4\'ac\'c8\'cf\'ca\'c7private\'bc\'cc\'b3\'d0\'a3\'ac\'b6\'f8\'b4\'d3struct\'bc\'cc\'b3\'d0\'c4\'ac\'c8\'cf\'ca\'c7public\'b5\'c4\
\
\'c8\'e7\'b9\'fb\'d3\'c3programpack\'a3\'a8n\'a3\'a9\'b5\'c4\'d3\'c3\'b7\'a8\'a3\'ac\'c8\'e7\'b9\'fbn>\'c0\'e0\'d0\'cd\'b1\'e4\'c1\'bf\'a3\'ac\'d4\'f2\'cf\'e0\'b6\'d4\'d3\'dastruct\'c6\'f0\'ca\'bc\'b5\'d8\'d6\'b7\'b5\'c4\'c6\'ab\'d2\'c6\'c1\'bf\'ce\'aan\'a3\'ac\'b4\'f3\'d3\'da\'b5\'c4\'bb\'b0\'d4\'f2\'d7\'d4\'bc\'ba\'b5\'c4\'c0\'e0\'d0\'cd\'cb\'f9\'d5\'be\'d7\'d3\'bd\'da\'ce\'aa\'c6\'ab\'d2\'c6\'c1\'bf\'a1\'a3\
\
\
Leetcode\
\cf2 22. Generate Parentheses\
\'b2\'e5\'bf\'d5\'b7\'a8 n \'b5\'c4\'c7\'e9\'bf\'f6 \'b5\'c8\'d3\'da \'d4\'dan-1\'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2 \'c3\'bf\'b8\'f6\'bf\'d5 \'b2\'e5\'d2\'bb\'b8\'f6\'a1\'ae\'a3\'a8\'a3\'a9\'a1\'af,\'cb\'f9\'d2\'d4\'bf\'c9\'d2\'d4\'d3\'c3\'b5\'dd\'b9\'e9backtrack \'d6\'b1\'b5\'bdn==1 return [\'a1\'ae()\'a1\'af]\
\
32. Longest Valid Parentheses\
stack,res=[(-1,\'a1\'b0)\'a1\'b1)], 0 \'c8\'e7\'b9\'fb\'d3\'f6\'b5\'bd\'a1\'b0\'a3\'a9\'a1\'b1 \'c5\'d0\'b6\'cf\'c8\'e7\'b9\'fbstack\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'ca\'c7\'b2\'bb\'ca\'c7\'a3\'a8 \'c8\'e7\'b9\'fb\'ca\'c7\'be\'cdpop\'a3\'a8\'a3\'a9 res=Max\'a3\'a8res\'a3\'acI-stack\'a1\'be-1\'a1\'bf\'a1\'be1\'a1\'bf\'a3\'a9\
\
48. Rotate Image \
\'cf\'c8\'d7\'aa\'d6\'c3\'a3\'acfor I in range(n) :for j in range(i) : A[I][j],A[j][I]=A[j][I],A[I][j],\'c8\'bb\'ba\'f3\'c3\'bfrow \'bf\'aa\'ca\'bc\'c7\'b0\'ba\'f3\'bb\'bb \'bf\'c9\'d2\'d4\'d3\'c3 x \'ba\'cd ~x  \
49. Group Anagrams:\
Hash table\'a1\'afs key can not be list can use tuple(list) as a substitute\
Also str can not str.sort() but can sorted(str) ex: sorted(\'a1\'aeeat\'a1\'af)=[\'a1\'aea\'a1\'af,\'a1\'afe\'a1\'af,\'a1\'aft\'a1\'af]\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 \
45. Jump Game II\
\'c9\'e8\'d6\'c3cur_cover\'a3\'ba\'c3\'bf\'b4\'cecover\'b6\'bc\'d4\'da\'d1\'d3\'c9\'ec \'d2\'f2\'ce\'aa cur_cover =max(cur_cover,nums[I]+i) \'b5\'ab\'ca\'c7\'b5\'b1curcover =last\'ca\'b1step\'b2\'c5+1 \'b4\'ce\'ca\'c7 last=curcover \'a3\'a8last\'b3\'f5\'ca\'bc\'d6\'b5\'ce\'aa0\'a3\'a9\
\'c8\'e7\'b9\'fbcurcover \'a1\'b7 destination returnstep\
\
\cf2 54 Spiral Matrix \
While matrix \'b2\'bb\'cd\'a3\'b5\'c4pop \'d6\'b8\'b5\'bcmatrix \'c3\'bb\'c1\'cb  \'cf\'c8pop\'b3\'f6\'b5\'da\'d2\'bb\'d0\'d0\'c8\'bb\'ba\'f3\'ca\'a3\'cf\'c2\'c3\'bf\'d2\'bb\'d0\'d0\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'c8\'bb\'ba\'f3pop\'d7\'ee\'ba\'f3\'d2\'bb\'d0\'d0\'b5\'c4\'b5\'b9\'d0\'f0 \'c8\'bb\'ba\'f3pop\'b5\'b9\'d0\'f0\'b5\'c4\'c3\'bf\'d0\'d0\'b5\'c4\'b5\'da\'d2\'bb\'b8\'f6 \
59. Spiral Matrix II\
\'d4\'ec\'d2\'bb\'b8\'f6matrix matrix[I][j]=(i,j) \'c0\'fb\'d3\'c3spiral matrix while matrix \'c3\'bf\'b4\'cepop \'b3\'f6\'ce\'bb\'d6\'c3 \'ce\'bb\'d6\'c3\'b4\'e6\'c4\'c7\'b8\'f6\'b8\'c3\'b4\'e6\'b5\'c4\'d6\'b5\
  \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 61: Rotate List: \
\'d2\'f2\'ce\'aa\'d7\'f6\'cd\'ac\'d1\'f9\'b5\'c4\'b2\'d9\'d7\'f7\'b5\'bc\'d6\'c2\'d6\'d8\'b8\'b4\'b5\'c4\'bd\'e1\'b9\'fb\'b3\'f6\'cf\'d6\'a3\'ac\'d3\'c3%\'bd\'e2\'be\'f6\'a3\'aclistnode\'bf\'c9\'d2\'d4\'bd\'ab\'ca\'d7\'ce\'b2\'c1\'ac\'bd\'d3\'b3\'c9\'bb\'b7\'c8\'bb\'ba\'f3\'d3\'c3prev=None\'a3\'accur=head \'d5\'d2\'b5\'bd\'d2\'aa\'b5\'c4node\'c8\'bb\'ba\'f3tail.next=None\'be\'cd\'bf\'c9\'d2\'d4\'c1\'cb\'a1\'a3\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 76 minimum substring\
81. Search in Rotated Sorted Array II\
Binary search \'b1\'e4\'d0\'ce\'b5\'c4  \'cf\'c8\'d4\'da\'cb\'b3\'d0\'f2\'c0\'ef\'b5\'c4\'d5\'d2\'d5\'d2\'b2\'bb\'b5\'bd\'be\'cd\'d4\'da\'c1\'ed\'d2\'bb\'b1\'df\cf0 \
88. Merge sorted array\
\'b4\'d3\'b4\'f3\'cd\'f9\'d0\'a1merge \'b4\'ef\'b5\'bdin place\
\cf3 91 decode way:\
\'ca\'b9\'d3\'c3dp F(x)=F(x-1)+F(x-2) F(x)=F(x-1) F(x)=F(x-2)\'c8\'fd\'d6\'d6\'c7\'e9\'bf\'f6 x\'ce\'aafirst x digitals \'c3\'bf\'b4\'ce\'bd\'f8\'c0\'b4\'d2\'bb\'b8\'f6 \'c5\'d0\'b6\'cf\'ba\'cd\'c7\'b0\'d2\'bb\'b8\'f6\'ca\'c7\'b7\'f1\'d7\'e9\'b3\'c91-26\'c0\'ef\'b5\'c4\'d7\'d6\'c4\'b8\cf0 \
94 Binary tree in-order traversal:\
Left-root-Right\
Recursion: \'cf\'c8\'d2\'bb\'d6\'b1\'b5\'dd\'b9\'e9root.left\'c8\'bb\'ba\'f3append(root.val)\'c8\'bb\'ba\'f3\'b5\'dd\'b9\'e9root.right\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 96 Unique Binary Search Tree\'a3\'a8DP\'a3\'a9\
\'d1\'a1\'d4\'f1\'d2\'bb\'b8\'f6n, \'c4\'c7\'c3\'b4[1\'a1\'adn]\'b6\'bc\'bf\'c9\'d2\'d4\'d7\'f6root, left subtree \'d3\'c9\'b1\'c8root\'d0\'a1\'b5\'c4\'d7\'e9\'b3\'c9, \'d3\'d0f(i-1)\'d7\'e9\'ba\'cf\'a3\'a8\'d2\'f2\'ce\'aa\'b1\'c8I\'d0\'a1\'b5\'c4\'d3\'d0i-1\'b8\'f6\'ca\'fd\'a3\'a9 \'d3\'d2\'b1\'df\'d3\'d0\'a3\'a8n-i\'a3\'a9\'b8\'f6\'ca\'fd \'c4\'dc\'d7\'e9\'b3\'c9f\'a3\'a8n-i\'a3\'a9\'b8\'f6subtrees\'a3\'ac\'c8\'bb\'ba\'f3\'cf\'e0\'b3\'cb\'b5\'c4\'b5\'bdn\'b8\'f6\'ca\'fd\'ba\'f3\'d7\'e9\'b3\'c9\'b5\'c4tree\'b8\'f6\'ca\'fd\
99. Recover Binary Search Tree\
\'cf\'c8\'d3\'c3inorder traverse \'c9\'fa\'b3\'c9\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9 \'c8\'bb\'ba\'f3\'d3\'c3\'cb\'fc\'ba\'cdsort\'b9\'fd\'b5\'c4\'cb\'fc\'b6\'d4\'b1\'c8\'a3\'ac\'c8\'e7\'b9\'fb\'d3\'d0\'b2\'bb\'d2\'bb\'d1\'f9\'a3\'ac\'c4\'c7\'c1\'bd\'b8\'f6\'be\'cd\'d0\'e8\'d2\'aa\'cc\'e6\'bb\'bb\'a1\'a3\'c8\'bb\'ba\'f3\'d4\'d9\'bd\'f8\'d0\'d0recover \'a3\'a8\'b1\'e9\'c0\'fa\'cb\'f9\'d3\'d0node\
\'a3\'a9=a\'b5\'c4node\'be\'cd=b \'b5\'c8\'d3\'dab\'b5\'c4\'be\'cd\'b5\'c8\'d3\'daa\cf0 \
102 Binary tree level order traversal:\
\'d3\'c3stack. Stack 	\'c3\'bf\'b4\'ce\'b4\'e6\'c3\'bf\'b8\'f6level\'b5\'c4node \'c8\'bb\'ba\'f3\'c3\'bf\'b4\'ce\'d1\'ad\'bb\'b7pop\'b3\'f6\'c0\'b4 \'c3\'bf\'b8\'f6level\'b5\'c4node append\'bd\'f8res \'c8\'bb\'ba\'f3\'c5\'d0\'b6\'cf\'d5\'e2\'d0\'a9node\'ca\'c7\'b7\'f1\'d3\'d0\'cf\'c2\'d2\'bb\'b8\'f6level\'b5\'c4children \'d3\'d0\'b5\'c4\'bb\'b0append\'b5\'bdlevel\'c0\'ef \'c8\'bb\'ba\'f3\'d1\'ad\'bb\'b7\'d7\'ee\'ba\'f3append\'b5\'bdstack\'c0\'ef \'c3\'bf\'b4\'ce\'d1\'ad\'bb\'b7\'c7\'e5\'bf\'d5nums \'ba\'cdlevel\
104 maximum depth of BT \
\'d3\'c3deque([root,\'a1\'af*\'a1\'af]) \'c3\'bf\'b4\'cepopleft()\'b3\'f6\'c0\'b4\'b5\'c4\'ca\'c7\'c3\'bf\'d2\'bb\'b2\'e3\'cb\'f9\'d3\'d0\'b5\'c4nodes \'c3\'bf\'b8\'f6nodes BFS append\'bd\'f8deque \'c3\'bf\'b2\'e3\'d6\'ae\'bc\'e4\'d3\'c3\'a1\'ae*\'a1\'af\'cf\'e0\'b8\'f4\'c3\'bf\'b2\'e3\'d4\'aa\'cb\'d8\'a3\'ac\'b5\'b1\'ca\'b6\'b1\'f0\'b5\'bd\'cb\'fc\'ca\'b1 count+=1\
105 construct BT from preorder and inorder traversal\'a3\'ba\
\'b5\'dd\'b9\'e9\'a3\'ac\'c3\'bf\'b4\'cepreorder \'b3\'f6\'c0\'b4\'b5\'c4\'ca\'c7root \'d5\'d2\'b5\'bdroot\'b5\'c4index \'c8\'f4left\'c3\'bb\'d3\'d0\'b5\'c8\'d3\'daleft \'be\'cd\'d4\'daconstruct left subtree\
106 construct BT from postorder and inorder traversal\'a3\'ba\
\'c8\'e7\'b3\'f6\'d2\'bb\'d5\'de\'a3\'ac\'ba\'cd105\'d2\'bb\'d1\'f9 \'b5\'ab\'ca\'c7postorder\'ca\'c7left-right-root \'d3\'c3pop()\'b6\'f8\'b2\'bb\'ca\'c7pop(0)\'c3\'bf\'b4\'cepop\'b3\'f6\'c0\'b4\'b5\'c4\'ca\'c7\'c9\'cf\'d2\'bb\'b8\'f6\'b5\'c4\'d3\'d2child\'cb\'f9\'d2\'d4\'cf\'c8construct \'d3\'d2\'d7\'d3\'ca\'f7 \'c8\'bb\'ba\'f3\'d4\'d9\'d7\'f3 \'b2\'d9\'d7\'f7\'ba\'cd105\'d2\'bb\'d1\'f9\
111 minimum depth if binary tree:\
BFS \'d2\'f2\'ce\'aa\'ca\'c7\'b9\'e3\'b6\'c8\'d3\'c5\'cf\'c8\'a3\'ac\'cb\'f9\'d2\'d4\'cf\'c8\'b4\'a6\'c0\'ed\'d2\'bb\'b8\'f6level\'b5\'c4nodes \'b5\'b1\'b4\'a6\'c0\'ed\'cd\'ac\'b8\'f6level\'b5\'c4\'d2\'bb\'b8\'f6node \'ce\'aa leaf\'ca\'b1 \'d6\'b1\'bd\'d3return  \'a3\'a8return early\'a3\'a9\'be\'cd\'ca\'c7\'d7\'ee\'b6\'cc\'b5\'c4\
\'d2\'b2\'bf\'c9\'d2\'d4\'d3\'c3recursion\'a3\'ac \'d2\'bb\'d6\'b1\'b5\'dd\'b9\'e9\'b5\'bdNone  return 0  \'c3\'bf\'b8\'f6\'bd\'da\'b5\'e3 return \'c6\'e4 left and right \'b5\'c4\'d7\'ee\'d0\'a1\'d6\'b5\
120:Triangle:\
DP\'a3\'ban=len(T). \'bd\'a8\'c1\'a2\'d2\'bb\'b8\'f6NxN \'b5\'c4 table DP: top\'a1\'aadown \'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0\'d6\'d8\'b5\'fe \'d6\'b1\'bd\'d3\'c9\'cf\'d2\'bb\'b8\'f6\'bc\'d3\'cf\'c2\'d2\'bb\'b8\'f6 \'d3\'d0\'d6\'d8\'b5\'fe \'cf\'c2\'d2\'bb\'b8\'f6\'b5\'c8\'d3\'da\'c1\'bd\'b8\'f6\'d6\'d0\'bc\'d3\'cd\'ac\'d2\'bb\'b8\'f6\'d0\'a1\'b5\'c4\'c4\'c7\'d2\'bb\'b8\'f6\
123 Best Time to Buy and sell stock III\
# forward traversal, profits record the max profit \
# by the ith day, this is the first transaction\
                                                                                Return by + after\
# backward traversal, max_profit records the max profit\
# after the ith day, this is the second transaction    \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4  126. Word Ladder II\
\'bd\'a8\'c1\'a2\'d7\'d6\'b5\'e4 \{cog:dog, log  log: lot. Lot:hot dog: dot hot: hit \} key\'ca\'c7value\'b5\'c4\'d7\'aa\'bb\'bb\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 130:Surrounded Regions:\
\'ca\'b9\'d3\'c3DFS \'d2\'f2\'ce\'aa\'d6\'bb\'d3\'d0\'a1\'aeO\'a1\'af \'d4\'damatrix\'b5\'c4edge\'b5\'c4\'ca\'b1\'ba\'f2\'b2\'c5\'bb\'e1\'b2\'bb\'b1\'bb\'b0\'fc\'ce\'a7 \'cb\'f9\'d3\'d0\'d6\'bb\'d2\'aa\'cb\'d1\'cb\'f7\'ca\'c7\'b7\'f1\'d3\'d0\'a1\'aeO\'a1\'af\'d4\'daedge\'a3\'ac\'c8\'e7\'b9\'fb\'d3\'d0\'a3\'ac\'bd\'ab\'a1\'aeO\'a1\'af\'b1\'e4\'b3\'c9\'d2\'bb\'b8\'f6\'b7\'fb\'ba\'c5\'a3\'ac\'c8\'bb\'ba\'f3\'b1\'e9\'c0\'fa\'cb\'f9\'d3\'d0\'bd\'da\'b5\'e3\'a3\'ac\'c8\'f4\'ca\'c7\'cc\'d8\'ca\'e2\'b7\'fb\'ba\'c5\'be\'cd\'b0\'d1\'cb\'fc\'b1\'e4\'bb\'d8\'d4\'ad\'c0\'b4\'b5\'c4\'a1\'aeO\'a1\'af\'a3\'ac\'c8\'e7\'b9\'fb\'ca\'c7\'a1\'aeO\'a1\'af\'be\'cd\'b1\'e4\'b3\'c9X\
131.palindrome partition:\
1.recursion\'a3\'badfs \'b4\'d3\'b3\'a4\'b6\'c8\'ce\'aa1\'bf\'aa\'ca\'bc \'c8\'e7\'b9\'fb\'ca\'c7\'b6\'d4\'b3\'c6\'a3\'ac\'d4\'f2path+\'d5\'e2\'b8\'f6\'d7\'d6\'b4\'ae\'c8\'bb\'ba\'f3\'b5\'dd\'b9\'e9\'b3\'fd\'c1\'cb\'d5\'e2\'b8\'f6\'d7\'d6\'b4\'ae\'d6\'ae\'ba\'f3\'b5\'c4\'d7\'d6\'b4\'ae,\'b5\'c8\'b5\'bd\'b5\'d7\'c1\'cb \'bb\'d8\'cb\'dd \'bd\'f8\'d0\'d0\'b3\'a4\'b6\'c8\'ce\'aa2 \'b5\'c4\'d7\'d6\'b4\'ae \'b0\'b4\'d5\'d5\'d5\'e2\'b8\'f6\'b9\'e6\'c2\'c9 \'b5\'dd\'b9\'e9\'cf\'c2\'c8\'a5 for ex\'a3\'ba aaba\'a1\'aa>.     a,a,b,a,ba,ab,aba,aa,b,a,ba,aab,aaba\
2.dp\
138 copy list with random pointer\
\'cf\'c8\'d3\'c3dic \'b4\'e6\'d0\'c2\'bd\'a8\'b5\'c4Node with random=none next=none \'c8\'bb\'ba\'f3\'b1\'e9\'c0\'fa\'cb\'f9\'d3\'d0node \'a3\'acdic[node].next=dic[cur.next] dic[node].random=dic[node.random] \uc0\u160 \'d4\'da\'d7\'d6\'b5\'e4\'c4\'da\'d6\'d8\'d7\'e9\
139 word beak\
Dp: dp[start]=1 \'c8\'bb\'ba\'f3\'b1\'e9\'c0\'fa \'c8\'f4\'b9\'fb s[start:start+len(word)]==word \'d4\'f2\'d5\'e2\'b8\'f6\'b5\'a5\'b4\'ca\'b5\'c4\'bd\'e1\'ce\'b2+1 dp[index+1]=1 \'bd\'f8\'d0\'d0\'cf\'c2\'d2\'bb\'b8\'f6\'b5\'a5\'b4\'ca\'b5\'c4\'d1\'b0\'d5\'d2\'ba\'cd\'c5\'d0\'b6\'cf\
140. Word Break II\
recursion: \'c0\'fb\'d3\'c3s.startswith()   \'d1\'ad\'bb\'b7worddic \'c8\'e7\'b9\'fb\'d3\'d0word \'ca\'c7 \'cf\'d6\'d4\'das\'b5\'c4\'bf\'aa\'cd\'b7 \'d4\'f2\'bd\'f8\'cd\'f9\'cf\'c2\'b5\'dd\'b9\'e9 s[len(word):] resultOfTheRest=self.helper(s[len(word):],dic,memo)\
\'c0\'fb\'d3\'c3memo \'bc\'c7\'c2\'bc\'a3\'ac\'cb\'f9\'d2\'d4\'d2\'bb\'b4\'ce\'c7\'e9\'bf\'f6\'d6\'bb\'d3\'c3\'cb\'e3\'d2\'bb\'b1\'e9 \'c8\'e7\'b9\'fb\'bb\'b9\'d3\'f6\'b5\'bd\'cf\'e0\'cd\'ac\'b5\'c4substring \'d6\'b1\'bd\'d3\'b7\'b5\'bb\'d8 memo[s]\'b5\'c4\'d6\'b5 \
for result in resultOfTheRest:result=word+' '+result res.append(result)\
\
142. Linked List Cycle II:\
Linklist can be used in hash table\
\cf2 148. Sort List\
Merge sort: \'cf\'c8\'b5\'dd\'b9\'e9\'b7\'d6\'b5\'bd\'d6\'bb\'ca\'a3\'cf\'c2\'c1\'bd\'b8\'f6\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'d9merge\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 152:maximum product subarray\
\'d3\'c3\'c1\'bd\'b8\'f6dp\'c1\'d0\'b1\'ed\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'d2\'bb\'b8\'f6\'b4\'e6positive\'a3\'ac\'d2\'bb\'b8\'f6\'b4\'e6negitive, val=(current, pos[i-1]*current, neg[i-1]*current) pos[I]=max(val) neg[I]=min(val)\
154 find minimum in rotated sorted array II\
\'d3\'c3binary search  \'c6\'e4\'d6\'d0 \'c8\'f4nums[mid]<nums[mid-1]\'d4\'f2\'d6\'b1\'bd\'d3return nums[mid] \'c8\'e7\'b9\'fb\'b5\'c8\'d3\'danums[high] \'d4\'f2 high=high-1\
\
156 Binary tree upside down\
Swap \'a3\'acrecursion \'cf\'c8\'b5\'dd\'b9\'e9\'d5\'d2\'b5\'bd\'d7\'ee\'d7\'f3\'bd\'da\'b5\'e3 \'d7\'ee\'d7\'f3\'bd\'da\'b5\'e3\'be\'cd\'ca\'c7\'d0\'c2\'b5\'c4root\'c8\'bb\'ba\'f3\'d5\'d2\'ca\'c7\'b7\'f1\'d7\'ee\'d7\'f3\'bd\'da\'b5\'e3\'d3\'d0\'d3\'d2children \'c8\'e7\'b9\'fb\'d3\'d0 rmost\'be\'cd\'d4\'d9\'cd\'f9\'d3\'d2\'d5\'d2 \'c8\'bb\'ba\'f3 \'bd\'f8\'d0\'d0swap root rmost.left, rmost.right =  newroot, root.right,TreeNode(root.val) \'c8\'bb\'ba\'f3return\'c9\'cf\'d2\'bb\'b2\'e3\
\
161 One edit distance\
\'b1\'e9\'c0\'fa\'d2\'bb\'b1\'e9 s=s[:i]+t[i]+s[i+1:] break else:s=s[:i]+t[i]+s[I:] break return  s==t or s==t[:-1]\
\
163 missing range\
\'b5\'b1nums[i]> lower \'ca\'b1\'a3\'acres.append(str(lower)+\'a1\'af->\'a1\'af+str(nums[I]-1)). lower=nums[I]+1 I=I+1\
173 BTS iterator\
\'d4\'da init \'c0\'ef \'bd\'f8\'d0\'d0inorder traversal left-root\'a1\'aaright \'c8\'bb\'ba\'f3\'b7\'ad\'d7\'aa \'c3\'bf\'b4\'cepop\'b3\'f6\'c0\'b4\'b5\'c4\'b6\'bc\'ca\'c7\'d7\'ee\'d0\'a1\'b5\'c4\
179.Largest number\
nums = map(str, nums).  t=list(nums).  t.sort(key=cmp_to_key(lambda a, b: int(b+a)-int(a+b)))\
187. Repeated DNA Sequences\
\'d2\'bb\'b8\'f6 res set \'d2\'bb\'b8\'f6 check set \'c8\'f4\'d5\'e2\'cc\'f5\'d0\'f2\'c1\'d0\'c3\'bb\'d4\'dacheck\'bc\'fb\'b9\'fd \'c4\'c7\'be\'cdadd\'b5\'bdcheck\'c0\'ef \'c8\'f4\'bc\'fb\'b9\'fd \'be\'cd add\'b5\'bdres\'c0\'ef\
190:\
bin()[2:].zfill(32)\
\cf2 198 house robber\
nums=[0]+nums for i in range(2,len(nums)): nums[i]=max(nums[i-1],nums[i-2]+nums[i])\
\cf0 201Bitwise AND of Number range\
range(m,n) count=0 while m!=n m>>=1 n>>=1 count+=1. Return m<<count\
202 happy number: \'bd\'a8\'c1\'a2\'d2\'bb\'b8\'f6set \'b4\'e6\'b7\'c5\'c3\'bf\'b4\'ce\'b5\'c4\'ba\'cd \'c8\'e7\'b9\'fb\'d3\'d0\'ba\'cd\'d4\'daset\'c0\'ef \'be\'cd\'bb\'e1\'b5\'bc\'d6\'c2\'ce\'de\'cf\'de\'d1\'ad\'bb\'b7 \'cb\'f9\'d2\'d4 return false \'c8\'e7\'b9\'fb\'ba\'cd\'ce\'aa1 return true\
204 count primes : dp[] \'cf\'c8\'bc\'d9\'c9\'e8\'c8\'ab\'ca\'c7prime \'b4\'d32 \'bf\'aa\'ca\'bc \'c8\'f4 2 \'ca\'c7\'cb\'d8\'ca\'fd \'c4\'c7\'b4\'d32*2 \'bf\'aa\'ca\'bc  \'c3\'bb\'b9\'fd2\'b8\'f6 dp[n]=0 (\'d4\'ad\'c0\'b42\'a3\'ac4\'a3\'ac6\'a3\'ac8\'a3\'ac10\'b6\'bc\'ca\'c71 \'d2\'f2\'ce\'aa2\'ca\'c7\'cb\'d8\'ca\'fd \'cb\'f9\'d2\'d4\'b4\'d34\'bf\'aa\'ca\'bc6\'a3\'ac8\'a3\'ac10 \'b6\'bc\'b1\'e4\'b3\'c90\'a3\'a9\'c8\'bb\'ba\'f3\'bc\'d3\'d2\'bb\'d1\'ad\'bb\'b7\'d6\'b1\'d6\'c1\'b4\'d3\'bf\'aa\'cd\'b7\'b1\'e40\'b5\'c4\'ca\'fd\'b3\'ac\'b9\'fdrange\'d7\'ee\'b4\'f3\
205 isomorphic string : \'d3\'c3\'ca\'fd\'d7\'d6\'b4\'fa\'b1\'ed\'d7\'d6\'c4\'b8 \'cf\'e0\'cd\'ac\'d7\'d6\'c4\'b8\'d2\'bb\'d1\'f9\'b5\'c4\'ca\'fd\'d7\'d6 \
207 Course schedule\
Topological sort  1.\'bd\'a8\'c1\'a2 graph  g=\{n: Node(n) for n in range(\'bd\'da\'b5\'e3\'ca\'fd)\} 2 dfs \'c3\'bf\'b8\'f6\'bd\'da\'b5\'e3 \'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3\'ca\'c7white \'c8\'bb\'ba\'f3\'b4\'d3\'d5\'e2\'b8\'f6\'bd\'da\'b5\'e3\'c4\'dcdfs\'b5\'bd\'d2\'bb\'b8\'f6grey\'b5\'c4\'bd\'da\'b5\'e3\'cb\'b5\'c3\'f7\'d3\'d0\'b7\'b4\'cf\'f2\'b5\'c4 return false \'d2\'bb\'d6\'b1\'bb\'d8\'cb\'dd\'b5\'bd\'cd\'b7 return false\
class Node:\
    def __init__(self,x):\
        self.val=x\
        self.color='white'\
        self.next=[]\
209:\
\'d3\'c3 slidingwindow \'d2\'bb\'bf\'aa\'ca\'bcstart\'ba\'cdend\'b6\'bc\'d4\'da\'d7\'ee\'b3\'f5\'a3\'ac end\'b2\'bb\'b6\'cf\'d4\'f6\'bc\'d3\'d6\'b1\'b5\'bdwindow\'c0\'ef\'b5\'c4sum\'b4\'f3\'d3\'da\'b5\'c8\'d3\'datarget\'a3\'ac \'c8\'bb\'ba\'f3\'bb\'ac\'b6\'af\'a3\'ac \'cf\'c8\'bc\'f5\'c8\'a5start\'cb\'f9\'b4\'a6\'b5\'c4\'d6\'b5 \'c8\'bb\'ba\'f3 \'bc\'d3\'a3\'a8end+1 \'a3\'a9\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'bb\'ac\'b6\'af\'a3\'ac\'c8\'f4\'d0\'a1\'d3\'datarget\'a3\'ac\'bc\'cc\'d0\'f8expanse end \'c8\'f4\'b4\'f3\'d3\'da\'b5\'c8\'d3\'da \'d4\'f2\'cb\'f5\'d0\'a1window \'d6\'b1\'d6\'c1\'d0\'a1\'d3\'datarget\
211 add and search word: data structure design\
Using trie\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 212. Word Search II\
\'c0\'fb\'d3\'c3\'b2\'e9\'d1\'af\'ca\'e9trie\'a3\'ac \'bd\'a8\'c1\'a2trie \'c8\'bb\'ba\'f3\'bd\'f8\'d0\'d0dfs \'c3\'bf\'b4\'cedfs\'c7\'b0 board[I][j]=\'a1\'b0*\'a1\'b1 \'d4\'da\'b1\'e9\'c0\'fa\'cb\'fb\'b5\'c4\'d6\'ae\'ba\'f3board[I][j]=\'a1\'aechar\'a1\'af\'bb\'d6\'b8\'b4board\'b5\'c4\'d1\'f9\'d7\'d3\'a3\'ac\'ce\'aa\'d6\'ae\'ba\'f3\'b5\'c4word\'d7\'f6\'d7\'bc\'b1\'b8\cf0 \
\
215 kthlargest element in a array\'a3\'bahttps://leetcode.com/problems/kth-largest-element-in-an-array/discuss/330933/Python-heap-and-quick-sort\
Random.choice() \'d2\'bb\'b8\'f6pivot, Then set 3 [], lower equal larger then if len(larger)<k<=len(larger)+len(equal) return equal[0] elif return  else return  (recursion )\
221.Maximum square\
Dp: \'cf\'f1\'d7\'ee\'b3\'a4\'d7\'d3\'b4\'ae\'c4\'c7\'d1\'f9padding 0 \'c8\'bb\'ba\'f3 \'b1\'e9\'c0\'fa\'cb\'f9\'d3\'d0\'b5\'e3  \'b0\'d1\'c3\'bf\'b8\'f6\'b5\'e3\'b5\'b1\'d7\'f7\'d2\'bb\'b8\'f6square\'b5\'c4\'d3\'d2coner \'c8\'f4\'cb\'fb\'d6\'dc\'ce\'a7\'d7\'ee\'d0\'a1\'ca\'c71 \'d4\'f2 \'cb\'fb=1+1  dp[i][j]=min(dp[i-1][j],dp[i-1][j-1],dp[i][j-1])+1 \'d2\'f2\'ce\'aa\'d6\'bb\'d3\'d0\'d6\'dc\'ce\'a7\'b6\'bc\'ca\'c7\'cf\'e0\'b5\'c8\'b5\'c4\'ca\'b1\'ba\'f2 square \'b2\'c5\'c4\'dc\'d4\'f6\'bc\'d3\'d2\'bb\'c8\'a6\
222 count complete tree node\
:binary  search \'c8\'e7\'b9\'fb\'ca\'c7complete tree \'d7\'ee\'ba\'f3\'d2\'bb\'b2\'e3\'bf\'cf\'b6\'a8\'ca\'c7\'b4\'d3\'d7\'f3\'bf\'aa\'ca\'bc\'a3\'ac \'cb\'f9\'d2\'d4\'bd\'a8\'c1\'a2\'ba\'af\'ca\'fdleftdepth \'c8\'a5\'d5\'d2\'d7\'ee\'d7\'f3\'b1\'df\'bd\'da\'b5\'e3\'b5\'c4\'c9\'ee\'b6\'c8\'a3\'ac\'d6\'f7\'ba\'af\'ca\'fd\'d6\'d0\'c8\'e7\'b9\'fbroot \'b5\'c4\'d7\'f3\'d3\'d2leftdepth\'d2\'bb\'d1\'f9 \'cb\'b5\'c3\'f7\'d7\'f3\'b1\'df\'ca\'c7\'c2\'fa\'b5\'c4 \'d3\'d2\'b1\'df\'b2\'bb\'d2\'bb\'b6\'a8 \'cb\'f9\'d2\'d4\'d7\'df\'d3\'d2\'bd\'da\'b5\'e3 \'c8\'bb\'ba\'f3\'cd\'ac\'d1\'f9\'b5\'c4\'b2\'d9\'d7\'f7\'a3\'ac\'c3\'bf\'b4\'cecount+=2**depth \'d2\'f2\'ce\'aa\'b4\'d3\'b5\'cd\'cd\'f9\'c9\'cf\'bc\'d3 \'ba\'cd\'b4\'d3\'b8\'df\'cd\'f9\'b5\'cd\'bc\'d3\'d7\'dc\'ba\'cd\'ca\'c7\'d2\'bb\'d1\'f9 \'b5\'ab\'d2\'bb\'bf\'aa\'ca\'bc\'ba\'dc\'c4\'d1\'b6\'ae\'a3\'ac\'c9\'e8\'d6\'c3count=0 initial\
227 basic calculator \
\'cf\'d6\'d4\'da\'d4\'ad\'d3\'d0\'b5\'c4string \'d7\'ee\'c7\'b0\'c3\'e6+\'a1\'ae+\'a1\'af \'bc\'c7\'c2\'bc\'c7\'b0\'d2\'bb\'b8\'f6ALU \'c8\'e7\'b9\'fb\'d3\'f6\'b5\'bdalu \'d4\'f2\'c5\'d0\'b6\'cf\'c9\'cf\'d2\'bb\'b8\'f6 \'b8\'f9\'be\'dd\'c9\'cf\'d2\'bb\'b8\'f6alu \'c0\'b4append \'bd\'f8\'c8\'eb\'d7\'ee\'d6\'d5\'b5\'c4stack \'a3\'a8* \'bb\'f2/ \'d2\'aa\'cf\'c8pop \'b3\'f6\'c9\'cf\'d2\'bb\'b8\'f6operand \'d4\'da\'ba\'cd\'cf\'d6\'d4\'da\'b5\'c4num\'b2\'d9\'d7\'f7\'a3\'a9\'d7\'ee\'d6\'d5\'b7\'b5\'bb\'d8 sum\'a3\'a8stack\'a3\'a9\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 236 Lowest common ancestor of a binary tree:\
Recursion\'a3\'ba root \'d7\'f3\'d3\'d2\'b7\'d6\'b1\'f0\'d5\'d2 \'d5\'d2\'b5\'bd\'c6\'e4\'d6\'d0\'d6\'ae\'d2\'bb\'be\'cdreturn \'a3\'ac\'b6\'d4\'d3\'da\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3,\'c8\'e7\'b9\'fb\'cb\'fc\'d7\'f3\'b1\'df\'c3\'bb\'d3\'d0\'a3\'a8None\'a3\'a9 \'d3\'d2\'b1\'df\'d3\'d0\'a3\'a8\'a3\'a1=None\'a3\'a9 \'cb\'b5\'c3\'f7\'b6\'bc\'d4\'da\'d3\'d2\'b1\'df \'b7\'b4\'d6\'ae\'b6\'bc\'d4\'da\'d7\'f3\'b1\'df\'a3\'acreturn\'c4\'c7\'b8\'f6\'a3\'a1=None \'b5\'c4\'d6\'b5 \'a3\'ac \'c8\'e7\'b9\'fb\'c1\'bd\'b1\'df\'b6\'bc\'d3\'d0\'a3\'ac\'d4\'f2\'cb\'b5\'c3\'f7\'cb\'fc\'be\'cd\'ca\'c7\'c4\'c7\'b8\'f6common ancestor\'a3\'ac\'c8\'bb\'ba\'f3backtrack\'b5\'bd\'d7\'ee\'cd\'b7\cf0 \
237 del node from linklist:\
Swap:   \'c9\'e8\'c1\'a2pre  cur.val,q.val=q.val,cur.val   \'bb\'bb\'b5\'bd\'d7\'ee\'ba\'f3 pre.next=None \'b0\'d1\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3\'c5\'aa\'b5\'f4\
238 product of array except self:\
\'b2\'bb\'d3\'c3divide \'c7\'d2O(n),  two pointer high and low\'a3\'acright \'bc\'c7\'c2\'bc \'b4\'d3\'d3\'d2\'b5\'bdhigh \'b5\'c4\'bd\'d7\'b3\'cb left\'bc\'c7\'c2\'bc\'b4\'d3\'d7\'f3\'b5\'bdlow\'b5\'c4\'bd\'d7\'b3\'cb \'b1\'e9\'c0\'fa\'d2\'bb\'b1\'e9array  left, right\'a3\'ac \'c3\'bf\'b8\'f6\'b5\'e3\'bb\'e1\'d2\'f2\'ce\'aalow \'ba\'cd high \'b1\'e9\'c0\'fa\'c1\'bd\'b1\'e9\'a3\'ac \'c3\'bf\'b4\'ce\'b3\'c6\'b5\'c4\'ca\'c7left\'b5\'c4\'bd\'d7\'b3\'cb\'bb\'f2\'ca\'c7right\'b5\'c4\'bd\'d7\'b3\'cb left*=num[low] right*=num[high] low+=1 high-=1\
\'c8\'bb\'ba\'f3 \'c9\'e8\'c1\'a2res=[1]*len(array) res[low],res[high](\'c6\'e4\'ca\'b5\'be\'cd\'ca\'c7\'c3\'bf\'b8\'f6\'b5\'e3\'b1\'e9\'c0\'fa\'c1\'bd\'b1\'e9)*= left, right\
240 search a 2D matrix\
\'d3\'c3\'d7\'ee\'d3\'d2\'c9\'cf\'bd\'c7\'b5\'c4item\'d7\'f6\'b1\'c8\'bd\'cf(row=0, col=len(matrix[0])-1)\'a3\'ac\'c8\'e7\'b9\'fb\'b4\'f3\'d3\'daitem\'a3\'ac\'d4\'f2\'cd\'f9\'cf\'c2\'d5\'d2 \'c8\'f4\'d0\'a1\'d3\'daitem \'d4\'f2\'cd\'f9\'d7\'f3\'d5\'d2\
241Different way to add parentheses\
Recursion \'bd\'a8\'c1\'a2 helper  \'ba\'af\'ca\'fd\'c0\'ef\'b5\'c3\'b5\'bdleft \'ba\'cd right left \'ba\'cd right \'ce\'aa \'d5\'e2\'b8\'f6\'b7\'fb\'ba\'c5 \'d7\'f3\'b1\'df \'b5\'c4\'cb\'f9\'d3\'d0\'d7\'e9\'ba\'cf\'b5\'c4\'bc\'af\'ba\'cf \'ba\'cd\'d5\'e2\'b8\'f6\'b7\'fb\'ba\'cf\'d3\'d2\'b1\'df\'cb\'f9\'d3\'d0\'d7\'e9\'ba\'cf\'b5\'c4\'bc\'af\'ba\'cf\
243 Shortest word distance:\
\'d7\'d6\'b5\'e4 \'bc\'c7\'c2\'bc\'d7\'ee\'d0\'c2indx \'c3\'bf\'b4\'ce\'d1\'ad\'bb\'b7\'b8\'fc\'d0\'c2\'d7\'ee\'d0\'a1dis\
244 Shortest word distance II\
\'d2\'f2\'ce\'aa\'d6\'bb\'bc\'c6\'cb\'e3 call shortdistance \'b5\'c4\'ca\'b1\'bc\'e4 \'cb\'f9\'d2\'d4\'d4\'dainit \'c0\'ef\'d3\'c3dict \'b4\'e6\'ba\'c3  \'d4\'dacall function \'c0\'ef O\'a3\'a81\'a3\'a9\'b2\'e9\'d1\'af \'a3\'ac\'c8\'bb\'ba\'f3\'d1\'ad\'bb\'b7\'ba\'dc\'c9\'d9\'b4\'ce\'b5\'c3\'b5\'bd\'bd\'e1\'b9\'fb\
249 Group shifted string \
key=() key+=((ord(s[I+1]-ord(s[I]))+26)%26),) \'d3\'c3\'d7\'f8\'b1\'ea\'c0\'b4()\'b5\'b1key (key+=(***,)) \'cd\'ac\'d1\'f9\'b5\'c4key append \'bd\'f8\'c8\'a5 \'d7\'ee\'ba\'f3 \'ca\'e4\'b3\'f6dict.values\
250 count univalve subtree\
\'d7\'d4\'c9\'cf\'b6\'f8\'cf\'c2 \'b5\'dd\'b9\'e9  \'d5\'d2 \'c8\'e7\'b9\'fb\'ca\'c7leaf \'d6\'b1\'bd\'d3\'bc\'d31 \'c8\'e7\'b9\'fb \'ca\'c7\'b0\'ebtree(\'d3\'d0\'d2\'bb\'b8\'f6child \'c7\'d2\'c4\'c7\'b8\'f6child \'ca\'c7 leaf) \'c8\'e7\'b9\'fbchild=root \'d4\'f2+1 \'c8\'e7\'b9\'fbleft=right=root \'d4\'f2+1\
\cf2 253 Meeting room II\
\'b0\'d1\'c3\'bf\'b8\'f6\'bb\'e1\'d2\'e9\'b5\'c4\'bf\'aa\'ca\'bc\'ba\'cd\'bd\'e1\'ca\'f8\'b7\'d6\'bf\'aa \'c8\'bb\'ba\'f3sort \'b5\'b1\'d2\'bb\'b8\'f6\'bb\'e1\'d2\'e9\'bf\'aa\'ca\'bc\'c1\'cb +1 \'b5\'b1\'d2\'bb\'b8\'f6\'bb\'e1\'d2\'e9\'bd\'e1\'ca\'f8\'c1\'cb-1 \'a3\'a8\'c8\'e7\'b9\'fb\'d3\'d0\'d6\'d8\'b5\'fe \'bf\'cf\'b6\'a8\'bb\'e1+1\'ba\'f3\'d3\'d6+1  \'d4\'f2\'d0\'e8\'d2\'aa2\'b8\'f6\'bb\'e1\'d2\'e9\'ca\'d2\'c1\'cb \'c8\'bb\'ba\'f3\'d6\'ae\'ba\'f3\'bd\'e1\'ca\'f8\'ca\'b1\'bc\'e4\'b5\'bd\'c1\'cb -1\'a3\'a9 return \'d7\'ee\'b4\'f3\'b5\'c4\'ca\'b1\'ba\'f2\'b5\'c4\'d6\'b5\cf0 \
254 Factor combinations \
256 paint house\
 For each house  \'cd\'bf\'c3\'bf\'d2\'bb\'d6\'d6\'d1\'d5\'c9\'ab\'b5\'c4total\'d7\'ee\'d0\'a1\'d6\'b5 \'cc\'b0\'d0\'c4\'b5\'bd\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6house \'c8\'bb\'ba\'f3 \'d4\'da\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6house\'c8\'fd\'d6\'d6\'d1\'d5\'c9\'ab\'b5\'c4\'d7\'dc\'bb\'a8\'cf\'fa\'c0\'ef\'d5\'d2\'d7\'ee\'d0\'a1\'b5\'c4\
259 3sum smaller\
Start, mid,end=I, I+1,k-1 (k=len(nums) I for I in range(len(mums)))\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 261 Graph valid tree\
Method 1: union  \'c3\'bf\'b3\'f6\'c0\'b4\'d2\'bb\'b8\'f6edge\'a3\'ac\'c6\'e4\'c1\'bd\'b8\'f6node \'d3\'c3 find \'b7\'bd\'b7\'a8 \'d5\'d2\'b5\'bd\'cb\'fb\'c3\'c7\'b5\'c4root \'c8\'e7\'b9\'fb\'cb\'fb\'c3\'c7root\'b2\'bb\'d2\'bb\'d1\'f9 \'d2\'f2\'ce\'aa\'d5\'e2\'b8\'f6edge \'cb\'f9\'d2\'d4union \'b5\'da\'d2\'bb\'b8\'f6\'ce\'aa\'b5\'da\'b6\'fe\'b8\'f6\'b5\'c4parent \'d7\'ee\'d6\'d5union \'cb\'f9\'d3\'d0edge \'c8\'bb\'ba\'f3 find \'c3\'bf\'b8\'f6\'bd\'da\'b5\'e3 \'c8\'e7\'b9\'fb \'b4\'f3\'bc\'d2\'b5\'c4root\'b6\'bc\'ca\'c7\'cd\'ac\'d2\'bb\'b8\'f6\'ca\'fd \'c4\'c7return true\cf0 \
264 ugly number II\
box,find,factor=[1],[0,0,0],[2,3,5]\
        for i in range(n-1):\
            t=[box[find[j]]*factor[j] for j in range(3)]\
            element=min(t)\
            box.append(element)\
            for j in range(3):\
                if box[find[j]]*factor[j]==element:\
                    find[j]+=1\
        return box[-1]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 277. Find the Celebrity:\
\'cf\'c8\'bc\'d9\'c9\'e8\'c4\'c7\'b8\'f6\'c3\'fb\'c8\'cb\'ca\'c70 \'c8\'bb\'ba\'f3\'d1\'ad\'bb\'b7\'cb\'f9\'d3\'d0\'c8\'cb\'a3\'ac\'c8\'e7\'b9\'fbcandidate\'c8\'cf\'ca\'b6\'c4\'c7\'b8\'f6\'c8\'cb\'a3\'ac\'c4\'c7\'c4\'c7\'b8\'f6\'c8\'cb\'be\'cd\'b1\'e4\'b3\'c9candidate\'a3\'ac\'d6\'ae\'ba\'f3\'d1\'ad\'bb\'b7candidate \'d6\'ae\'c7\'b0\'b5\'c4\'c8\'cb\'a3\'ac\'c8\'e7\'b9\'fbcandidate\'c8\'cf\'ca\'b6\'cb\'fb\'c3\'c7\'c6\'e4\'d6\'d0\'d6\'ae\'d2\'bb\'be\'cdreturn-1 \'c8\'e7\'b9\'fb\'cb\'fb\'c3\'c7\'b2\'bb\'c8\'cf\'ca\'b6candidate \'c4\'c7\'d2\'b2return-1 \'d6\'ae\'ba\'f3\'d4\'d9\'d1\'ad\'bb\'b7candidate \'d6\'ae\'ba\'f3\'b5\'c4\'c8\'cb \'c8\'e7\'b9\'fb\'d6\'ae\'ba\'f3\'b5\'c4\'c8\'cb\'b2\'bb\'c8\'cf\'ca\'b6candidate \'d2\'b2 return-1 \'d2\'f2\'ce\'aa\'d4\'da\'b5\'da\'d2\'bb\'b2\'bdcandidate \'d2\'d1\'be\'ad\'b2\'bb\'c8\'cf\'ca\'b6\'cb\'fb\'ba\'f3\'c3\'e6\'b5\'c4\'c8\'cb\'c1\'cb\cf0 \
\
279 perfect square\
DP:\'d7\'d4\'bc\'ba\'b5\'c4\'b4\'f0\'b0\'b8 \'c3\'bf\'b4\'ce\'d1\'ad\'bb\'b7box\'c0\'ef\'b5\'c4element   box \'c0\'ef append(I**2)\
BFS: queue \'d2\'bb\'bf\'aa\'ca\'bc\'b4\'e6(n,0),\'c8\'bb\'ba\'f3(n-j,+1)\'c5\'bc\'b4\'cb\'c0\'e0\'cd\'c6\'d6\'b1\'b5\'bdn-j =0 return +1\
282:\
Recursion:  helper(cur_ind, cur_val,pre_val,exp)\
285 Inorder successor of BST\
Recursion: \'c8\'e7\'b9\'fb\'b4\'f3\'d3\'datarget  \'cd\'f9\'d7\'f3\'d5\'d2 \'c8\'e7\'b9\'fb\'d0\'a1\'d3\'datarget \'cd\'f9\'d3\'d2\'d5\'d2\'d6\'b1\'b5\'bd\'d5\'d2\'b5\'bd\'b1\'c8target\'b4\'f3\'b5\'c4\'a3\'ac\'c8\'e7\'b9\'fb\'d5\'d2\'b5\'bd\'b5\'d7 return float(\'a1\'aeinf\'a1\'af) ,None  \'cd\'f9\'c9\'cf\'bb\'d8\'cb\'dd \'a3\'a8\'b5\'bd\'c1\'cb\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3\'a3\'a9\'ca\'c7\'d3\'c9\'d7\'f3\'bd\'da\'b5\'e3\'bb\'d8\'cb\'dd\'b5\'bd\'d5\'e2\'b8\'f6\'bd\'da\'b5\'e3\'a3\'ac\'d4\'d9\'cf\'f2\'c9\'cfreturn min\'a3\'a8\'bb\'d8\'cb\'dd\'c9\'cf\'b5\'c4\'d6\'b5\'a3\'acroot\'b5\'c4\'d6\'b5\'a3\'a9 \
290 word pattern\
\'bb\'ee\'d3\'c3 map zip \'d3\'c3\'b5\'da\'d2\'bb\'b4\'ce\'b3\'f6\'cf\'d6\'b5\'c4index\'c0\'b4\'b1\'ed\'ca\'betoken \'ba\'cdpattern\
296 Best meeting point\
1D\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'be\'cd\'ca\'c7\'d5\'d2median\'a3\'ac 1D array \'c0\'ef \'c9\'e8\'d6\'c3left \'ba\'cdright , I \'ba\'cd j\'a3\'ac left(\'b4\'fa\'b1\'ed \'bd\'d8\'d6\'b9\'d5\'e2\'b8\'f6\'b5\'e3\'d3\'d0\'b6\'e0\'c9\'d9\'b8\'f6\'c8\'cb) \'c3\'bf\'d7\'df\'d2\'bb\'b2\'bd d+=left*1\'a3\'acI+=1 \'cf\'e0\'b7\'b4 right \'d2\'b2\'ca\'c7\'c8\'e7\'b4\'cb j-=1 d+=right*1 \'b5\'b1 I=j \'ca\'b1\'cf\'e0\'d3\'f6 \'b4\'cb\'ca\'b1\'d0\'e8\'d2\'aa\'b5\'c4\'be\'e0\'c0\'eb\'d7\'ee\'d0\'a1\'a3\'a8\'d2\'f2\'ce\'aa\'c8\'cb\'b6\'e0\'b5\'c4\'bb\'b0\'d7\'df\'b5\'c4d\'be\'cd\'bb\'e1\'b8\'fc\'b6\'e0 \'c3\'bf\'b4\'ce\'c8\'c3\'c8\'cb\'c9\'d9\'b5\'c4\'c4\'c7\'d2\'bb\'b7\'bd\'d7\'df\'a3\'a9\
\cf2 300 Longest increasing substring:\
1.\'d3\'c3bisect\cf0 \
304 Range sum 2D\
Dp \'c3\'bf\'b8\'f6\'b5\'e3\'b5\'c8\'d3\'da\'b4\'d3\'b6\'a5\'b5\'e3\'b5\'bd\'d5\'e2\'b8\'f6\'b5\'e3cover\'b5\'c4\'b3\'a4\'b7\'bd\'d0\'ce\'c3\'e6\'bb\'fd \'c8\'bb\'ba\'f3return \'cd\'a8\'b9\'fd\'bc\'d3\'bc\'f5\'b3\'cb\'b3\'fd\'cd\'bc\'d0\'ce\'b5\'c3\'b5\'bd\'cb\'f9\'d2\'aa\'b5\'c3\'b5\'bd\'b5\'c4\'b3\'a4\'b7\'bd\'d0\'ce\'c0\'ef\'b5\'c4\'ba\'cd\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 307 Range sum query\'a1\'aa mutable\
Binary Index Tree: 1. compute the first I elements 2 modify the specific value in array and let the 1 step in O(logn)\cf0 \
310:MHT:\
\'c0\'fb\'d3\'c3graph \'d5\'d2leaves( leaves=[i for i in range(n) if len(g[i])<=1]) \'a3\'ac\'bd\'a8\'c1\'a2new leaves \'d1\'ad\'bb\'b7leaves\'b5\'c4\'c3\'bf\'b8\'f6leaf \'b4\'d3\'cb\'fc\'b5\'c4neighbor \'c9\'be\'c8\'a5\'cb\'fc\'d7\'d4\'bc\'ba \'c8\'e7\'b9\'fb\'cb\'fb\'b5\'c4neighbor \'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'c1\'b4\'bd\'d3\'b5\'c4\'ca\'b1\'ba\'f2 \'c4\'c7\'cb\'fb\'b5\'c4neighbor \'ca\'c7\'d0\'c2\'b5\'c4leaf append \'bd\'f8newleaves\'c0\'ef \'d2\'d4\'b4\'cb\'c0\'e0\'cd\'c6\
\'b5\'b1\'b4\'ef\'b5\'bd\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6leaf \'c7\'d2 \'cb\'fc\'c3\'bb\'d3\'d0\'c1\'b4\'bd\'d3\'b5\'c4\'ca\'b1\'ba\'f2 \'be\'cdreturn \'b5\'b1\'cf\'c2\'b5\'c4leaves\
312 Brust Balloon\
DP : Key point: reverse thinking.\
Think about n balloons if k is the last one to burst, last_burn = nums[-1] * nums[k] * nums[n].\
We can see that the balloons is again separated into 2 sections. The left and right section\
now has well defined boundary and do not affect each other! Therefore we can use dynamic algorithm.\
\
\'b8\'f7\'d6\'d6stock\'a3\'ba\
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/404998/All-in-One-O(n)-time-O(1)-space-Python-solution\
\'d3\'c3\'c1\'bd\'b8\'f6\'b1\'e4\'c1\'bf\'a3\'ac \'d2\'bb\'b8\'f6profit after buying s1 \'d2\'bb\'b8\'f6 profit after selling s2\
\'d2\'bb\'bf\'aa\'ca\'bc\'c4\'e3\'c3\'bbprofit \'cb\'f9\'d2\'d4 s1=-prices[0] s1\'ba\'cds2\'b6\'bc\'d2\'aa\'be\'a1\'bf\'c9\'c4\'dc\'b4\'f3 \'d2\'f2\'ce\'aa\'b5\'b1 s1 \'b8\'c4\'b1\'e4\'b5\'c4\'ca\'b1\'ba\'f2\'cb\'b5\'c3\'f7\'d6\'ae\'c7\'b0sell \'ba\'f3 \'b5\'c3\'b5\'bd\'b5\'c4profit\'d4\'d9\'c2\'f2\'b5\'b1\'cc\'ec\'b5\'c4\'bd\'f8\'bc\'db\'bb\'e1\'b6\'e0\'b3\'f6\'c0\'b4\'c7\'ae\'b4\'cb\'ca\'b1 \'be\'cd\'bf\'c9\'d2\'d4\'d4\'d9\'bd\'f8\'d0\'d0\'d2\'bb\'b4\'cebuy sell  \'c8\'e7\'b9\'fb\'bb\'b9\'c3\'bb\'d6\'ae\'c7\'b0s1\'b4\'f3 \'cb\'b5\'c3\'f7 \'bb\'b9\'d2\'aa\'b5\'c8 ex 1\'a3\'ac4\'a3\'ac5\'a3\'ac6 \'b2\'bb\'c4\'dc4-1 +5-6 \'d2\'f2\'ce\'aa \'c8\'e7\'b9\'fb\'c2\'f44 profit=3\
\'d4\'d9\'c2\'f25\'b5\'c4\'bb\'b0 s1 \'be\'cd\'b5\'c8\'d3\'da -2 \'c1\'cb \'b1\'c8\'d6\'ae\'c7\'b0\'bb\'b9\'c9\'d9  \'c8\'f4\'b9\'fb\'ba\'f3\'c3\'e6\'d3\'f6\'b5\'bd\'c8\'ce\'ba\'ce\'b4\'f3\'b5\'c4price \'d6\'ae\'c7\'b0\'b5\'c4-1 \'d7\'dc\'c4\'dc\'b5\'c3\'b5\'bd\'b1\'c8-2 \'b6\'e0\'b5\'c4profit\
\
315 Count of Smaller Numbers After Self\
\'d4\'cb\'d3\'c3Binary index tree ,(reversed\'a3\'a8nums\'a3\'a9\'a3\'a9 sorted\'a3\'a8nums\'a3\'a9 bisect.bisectleft\
316  Remove Duplicate Letters  \
\'d3\'c3\'d7\'d6\'b5\'e4\'bc\'c7\'c2\'bc\'c3\'bf\'b8\'f6\'d7\'d6\'c4\'b8\'b3\'f6\'cf\'d6\'b5\'c4\'d7\'ee\'ba\'f3\'b5\'c4index \'c9\'e8\'d6\'c3cur_res=[]  \'d1\'ad\'bb\'b7 \'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0append \'c8\'e7\'b9\'fb\'d7\'d6\'c4\'b8\'d0\'a1\'d3\'dacur_res\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6 \'d4\'f2\'b1\'c8\'bd\'cf\'d5\'e2\'b8\'f6\'bd\'cf\'d0\'a1\'b5\'c4\'d7\'d6\'c4\'b8\'b5\'c4ind\'ba\'cdcurres\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'d7\'d6\'c4\'b8\'d7\'ee\'ba\'f3\'d2\'bb\'b4\'ce\'b3\'f6\'cf\'d6\'b5\'c4index \'c8\'e7\'b9\'fbindex\'b4\'f3\'d3\'da\'b5\'b1\'c7\'b0i \'d4\'f2pop\'b5\'f4 \'d2\'d4\'b4\'cb\'c0\'e0\'cd\'c6\'d6\'b1\'d6\'c1\'b2\'bb\'bb\'e1\'b3\'f6\'cf\'d6\'d5\'e2\'d1\'f9\'c7\'e9\'bf\'f6 curres append \'b5\'b1\'c7\'b0\'d7\'d6\'c4\'b8\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 329. Longest Increasing Path in a Matrix  \
DFS+memorized DP dfs\'b2\'bf\'b7\'d6\'ba\'dc\'bc\'f2\'b5\'a5 \'be\'cd\'ca\'c7\'b1\'e9\'c0\'fa\'c3\'bf\'b8\'f6\'b5\'e3\'b5\'c4\'ca\'b1\'ba\'f2\'bb\'e1\'d6\'d8\'b8\'b4\'b1\'e9\'c0\'fa\'d2\'bb\'d0\'a9\'b5\'e3\'a3\'ac\'cb\'f9\'d2\'d4\'b5\'da\'d2\'bb\'b4\'ce\'b1\'e3\'c0\'fb\'bc\'c7\'c2\'bc\'cf\'c2\'c0\'b4 \'c8\'bb\'ba\'f3\'ce\'aa\'d6\'ae\'ba\'f3\'b7\'fe\'ce\'f1 \'d6\'ae\'ba\'f3\'d3\'f6\'b5\'bd\'d6\'b1\'bd\'d3return \'d6\'b5\'be\'cd\'ba\'c3\
\
336. Palindrome Pairs\
\'d1\'ad\'bb\'b7\'c3\'bf\'b8\'f6word\'a3\'ac\'c8\'bb\'ba\'f3\'d1\'ad\'bb\'b7 j for j in range(len(word))\'a3\'ba\
pre=w[:j] suf=w[j:]\
\'c8\'e7\'b9\'fbpre\'ca\'c7\'b6\'d4\'b3\'c6\'b5\'c4 \'c7\'d2suf[::-1] \'d4\'dawords \'c0\'ef  \'d4\'f2\'bf\'c9\'d2\'d4\'d7\'e9\'b3\'c9\'d0\'c2\'b5\'c4\'b6\'d4\'b3\'c6string\
\'c8\'e7\'b9\'fbsuf\'ca\'c7\'b6\'d4\'b3\'c6\'b5\'c4 \'c7\'d2pre[::-1] \'d4\'dawords \'c0\'ef \'d4\'f2\'d2\'b2\'bf\'c9\'d2\'d4\'d7\'e9\'b3\'c9\'d0\'c2\'b5\'c4\'b6\'d4\'b3\'c6string\
Note\'a3\'ba\'d2\'f2\'ce\'aa pre= \'a1\'ae\'a1\'af \'b5\'c4\'ca\'b1\'ba\'f2\'d2\'b2\'c2\'fa\'d7\'e3pre\'b6\'d4\'b3\'c6 \'d7\'a2\'d2\'e2\'b2\'bb\'c4\'dc\'b3\'f6\'cf\'d6suf[\'a3\'ba\'a3\'ba-1]=word \'d5\'e2\'d1\'f9\'bb\'e1\'d6\'d8\'b8\'b4 \'cd\'ac\'d1\'f9\'d4\'da\'b5\'da\'b6\'fe\'cc\'f5\'cc\'f5\'bc\'fe\'ca\'ca\'d3\'c3 pre[\'a3\'ba\'a3\'ba-1]\'a3\'a1=word\
\'b2\'a2\'c7\'d2 j=len\'a3\'a8word\'a3\'a9 \'d6\'bb\'d3\'c3\'c5\'d0\'b6\'cf\'d2\'bb\'b4\'ce\'be\'cd\'b9\'bb\'c1\'cb \'b1\'c8\'c8\'e7\'a1\'b1 abcd","dcba"\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 337 house robber III\
binary tree \'b4\'d3\'b5\'d7\'cd\'f9\'b8\'df\'bb\'d8\'cb\'dd res(*,*) res[0]: the max money gained if rob the current house res[1] the max money gain if not rob the house \'b4\'d30\'a3\'ac0 \'cd\'f9\'c9\'cf\'bb\'d8\'cb\'dd return(root.val + left[1]+right[1], max(left[1],left[0])+max(right[1],right[0]))\
340. Longest Substring with At Most K Distinct Characters\
Sliding window\
Dict \'bc\'c6\'cb\'e3dic\'c0\'efkey\'b5\'c4\'ca\'fd\'c1\'bf \
348 Design Tic Tac Toe\
\'c0\'fb\'d3\'c3\'d7\'d6\'b5\'e4 \'c3\'bf\'b5\'b1\'cf\'c2\'d2\'bb\'d7\'d3 \'cb\'fc\'cb\'f9\'d4\'da\'b5\'c4\'b6\'d4\'bd\'c7\'cf\'df\'a3\'ac\'d0\'d0\'a3\'ac\'c1\'d0 \'bc\'b0\'a3\'a8row,col,row-col,row+col\'a3\'a9+=1  \'d7\'d6\'b5\'e4\'c3\'fb\'b3\'c6\'d3\'c9\'c8\'fd\'b8\'f6\'d4\'aa\'cb\'d8\'d7\'e9\'b3\'c9
\f2  
\f3 player , 
\f1 \'cb\'f9\'d4\'da\'d0\'d0or \'c1\'d0 or \'b6\'d4\'bd\'c7\'cf\'df  \'b5\'ab\'d3\'c9\'d3\'da\'d0\'d0\'c1\'d0\'b6\'d4\'bd\'c7\'cf\'df\'b5\'c4\'d6\'b5\'bf\'c9\'c4\'dc\'d6\'d8\'a3\'ac\'cb\'f9\'d2\'d4\'d4\'da\'bc\'d3\'c9\'cf\'cb\'fb\'c3\'c7\'b5\'c4\'cf\'c2\'b1\'ea\'c0\'b4\'c7\'f8\'b7\'d6\'a1\'a3\
\
361 Bomb enemy\
dp: \'cf\'c8\'d2\'d4\'c3\'bf\'d0\'d0\'ce\'aa\'b5\'a5\'ce\'bb\'d1\'ad\'bb\'b7\'d5\'e2\'d2\'bb\'d0\'d0\'b5\'c4\'cb\'f9\'d3\'d0\'c1\'d0\'a3\'ac\'c8\'e7\'b9\'fb\'d3\'d0E enemy+=1 \'b5\'bd\'d7\'ee\'ba\'f3\'bd\'f8\'d0\'d0propagate_row\'a3\'ba\'bd\'ab\'d5\'e2\'d2\'bb\'d0\'d0\'cb\'f9\'d3\'d0\'ca\'c70\'b5\'c4node ==enemy\'d7\'dc\'ca\'fd:(\'c8\'f4\'c6\'e4\'d6\'d0\'d3\'f6\'b5\'bdW \'be\'cd \'cf\'c8propagate W \'d6\'ae\'c7\'b0\'b5\'c4 \'c8\'bb\'ba\'f3 enmey \'b3\'f5\'ca\'bc\'bb\'af\'ce\'aa0 \'bc\'cc\'d0\'f8\'d1\'ad\'bb\'b7 \'d7\'ee\'ba\'f3propogate)\
\'b5\'b1row\'b2\'d9\'d7\'f7\'cd\'ea\'c1\'cb \'d2\'d4\'cd\'ac\'d1\'f9\'b5\'c4\'b7\'bd\'ca\'bd\'b2\'d9\'d7\'f7col(hint: while row>=0 and grid[row][col]!=\'a1\'aeW\'a1\'af: if grid[row][col]==\'a1\'ae0\'a1\'af:  dp[row][col]+=value row-=1)\
\cf2 362. Design Hit Counter\
\'b9\'b9\'d4\'ec\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9listnode \'ca\'b9\'d3\'c3\'c1\'b4\'b1\'ed\'bc\'c7\'c2\'bc\'c3\'bf\'b8\'f6timestamp \'b5\'c4\'b2\'d9\'d7\'f7 \'c7\'d2\'d3\'d0next, pre \'a3\'account\cf0 \
365 Water and jug problem\
\'c0\'fb\'d3\'c3math.gcd \'c7\'f3\'d7\'ee\'b4\'f3\'b9\'ab\'d2\'f2\'ca\'fd \'c8\'e7\'b9\'fbz%gcd(x,y)==0 return true else false \'c8\'e7\'b9\'fbz>x+y return False \'bb\'b9\'d2\'aa\'bf\'bc\'c2\'c7\'b6\'bc\'ca\'c70\'b5\'c4\'c7\'e9\'bf\'f6\
373. Find K Pairs with Smallest Sums\
\'c0\'fb\'d3\'c3heapq \'bf\'c9\'d2\'d4\'b6\'e0\'d4\'aa\'cb\'d8heap ex heapq.push(heap,[1,2,3,4,5,6])\'b0\'b4\'d3\'c5\'cf\'c8\'bc\'b6\'c5\'c5\'d0\'f2 \
377 combination sum IV\
Dp dp[I] \'ce\'aatarget=I \'d3\'d0\'b6\'e0\'c9\'d9\'d6\'d6\'d7\'e9\'ba\'cf dp[0]=1 \'d2\'f2\'ce\'aa\'bf\'cf\'b6\'a8\'b4\'d3dp(min(nums)) \'bf\'aa\'ca\'bc \'d3\'d0\'ca\'fd \'b5\'c8\'d3\'da1 dp[i]=sum(dp[i-j] for j in nums if i>=j)\
378 kth element in sorted matrix\
heap=[]   \'d2\'f2\'ce\'aa\'ca\'c7\'d5\'d2\'d7\'ee\'b4\'f3\'d6\'b5\
heapq.heappush(heap, nextVal) \'b0\'d1\'ca\'fd\'d7\'d6push \'bd\'f8\'c8\'ebheap \'d7\'ee\'b6\'a5\'ca\'c7minheap\
heapq.heappushpop(heap, nextVal) pop minheap \'c8\'bb\'ba\'f3push \'d0\'c2\'b5\'c4\'d6\'b5  \'a3\'a8\'d2\'f2\'ce\'aa\'d5\'d2\'b5\'c4\'ca\'c7\'b5\'dak\'b4\'f3\'b5\'c4 \'b5\'a5\'d3\'c3\'b5\'bdheap \'cb\'f9\'d2\'d4\'c8\'ab\'c8\'a1\'b8\'ba\'ca\'fd \'bf\'c9\'d2\'d4\'b0\'c9\'d7\'ee\'b4\'f3\'b5\'c4\'d6\'b5 \'b7\'c5\'b5\'bd\'d7\'ee\'b6\'a5\'c9\'cf \'d7\'ee\'c9\'cf\'c3\'e6\'c8\'e7\'b9\'fb\'ca\'c7-15\'a3\'ac-13\'c0\'b4\'c1\'cb \'b0\'d1-15pop -13\'bb\'bb\'b5\'bd\'d7\'ee\'b6\'a5\'c9\'cf\'a3\'a9\
\
\
384. Shuffle an Array\
Copy \'d2\'bb\'b8\'f6list nums \'d2\'aa\'d3\'c3 nums[:]\
\
390 Elimination Game]\
\'d5\'d2\'b9\'e6\'c2\'c9 \'cb\'ab\'ca\'fd\'ba\'cd\'b5\'a5\'ca\'fd\'c7\'e9\'bf\'f6\'d2\'b2\'b2\'bb\'cf\'e0\'cd\'ac step head remianing\
\
395. Longest Substring with At Least K Repeating Characters\
Recursion\'a3\'ba\
\'d3\'c3dict \'b4\'e6\'c3\'bf\'b8\'f6\'d7\'d6\'c4\'b8\'b3\'f6\'cf\'d6\'b5\'c4\'b4\'ce\'ca\'fd \'b5\'b1\'b4\'ce\'ca\'fd\'d0\'a1\'d3\'dak append \'bd\'f8 stop\'d6\'d0 \'a3\'ac \'d1\'ad\'bb\'b7s start=0 \'b4\'d3start\'bf\'aa\'ca\'bc \'c8\'e7\'b9\'fb\'d3\'f6\'b5\'bdstop\'c0\'ef\'b5\'c4\'d7\'d6\'c4\'b8 \'be\'cdappend \'bd\'f8\'c8\'ebvalid_s\'c0\'ef \'a3\'a8\'b5\'abvalid \'c0\'ef\'b2\'bb\'ca\'c7\'d7\'ee\'d6\'d5\'b4\'f0\'b0\'b8 \'d2\'f2\'ce\'aastop word \'bf\'c9\'c4\'dc\'bd\'d8\'b6\'cf\'b3\'f6\'cf\'d6\'b4\'ce\'ca\'fd>k\'b5\'c4\'d7\'d6\'c4\'b8 \'cb\'f9\'d2\'d4\'d2\'aa\'b3\'d6\'d0\'f8recursion valid_s\'c0\'ef\'b5\'c4substring \'d6\'b1\'d6\'c1\'d5\'fb\'b8\'f6substring \'c3\'bb\'d3\'d0stopword\'a3\'a9\
\
399. Evaluate Division\
BFS: \'ca\'d7\'cf\'c8\'bd\'a8\'c1\'a2graph \'c1\'bd\'b8\'f6\'ca\'fd\'d6\'ae\'bc\'e4\'cf\'e0\'b3\'fd\'be\'cd\'cf\'e0\'b5\'b1\'d3\'daedge \{n:\{d:val\}\} \uc0\u160  \'d4\'da\'d6\'f7\'ba\'af\'ca\'fd\'d6\'d0\'d1\'ad\'bb\'b7query\'a3\'ac \'c8\'e7\'b9\'fb\'c1\'bd\'b8\'f6n,d\u160 \'b6\'bc\'d4\'da graph \'c0\'ef \'d4\'f2BFS(queue \'c0\'ef\'d4\'ad\'c0\'b4\'ca\'c7\'a3\'a8a,1\'a3\'a9\'d2\'f2\'ce\'aaa/b=3 \'cb\'f9\'d2\'d4\'cd\'a8\'b9\'fdpop a \'c8\'bb\'ba\'f3\'d1\'ad\'bb\'b7a\'b5\'c4adj append \'bd\'f8\'c8\'ebqueue(b,3)\'c8\'bb\'ba\'f3\'d4\'d9\'cd\'a8\'b9\'fdb\'d5\'d2c NOTE\'a3\'bagraph \'d2\'bb\'b6\'a8\'d2\'aa\'c9\'e8\'c1\'a2visited \'d5\'e2\'d1\'f9\'b1\'dc\'c3\'e2\'cb\'c0\'d1\'ad\'bb\'b7 b\'d5\'d2c \'d6\'ae\'ba\'f3\'d3\'d6\'d5\'d2b\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3return res \'c8\'e7\'b9\'fbres=None return -1.0)\
\
403. Frog Jump:\
Dfs \'c3\'bf\'d2\'bb\'b8\'f6\'c7\'e9\'bf\'f6 1\'d6\'d6\'c7\'e9\'bf\'f63\'b8\'f7\'b7\'d6\'d6\'a7 \'d4\'d9\'c3\'bf\'d2\'bb\'b8\'f6\'c7\'e9\'bf\'f63\'b8\'f6\'b7\'d6\'d6\'a7 \'d6\'b1\'d6\'c1 \'d7\'df\'b5\'bd\'d7\'ee\'d6\'d5\'bd\'da\'b5\'e3 \'c3\'bb\'c4\'dc\'cd\'f9\'c7\'b0\'d7\'df return false  \'c3\'bf\'d2\'bb\'d6\'d6\'c7\'e9\'bf\'f6 \'d3\'c9\'cb\'fb\'b5\'c4\'b7\'d6\'d6\'a7 return \'bb\'d8\'c0\'b4 3\'b8\'f6 True or False\
\'c8\'f4\'b9\'fb\'d3\'d0\'d2\'bb\'b8\'f6True \'be\'cdreturn True\'a1\'a3backtrack \'d7\'ee\'cd\'b7\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 407. Trapping Rain Water II\
\'ca\'b9\'d3\'c3heapq: \'cf\'c8\'b0\'d1\'b1\'df\'d4\'b5\'b5\'c4\'b7\'bd\'bf\'e9\'bd\'da\'b5\'e3push \'bd\'f8\'c8\'ebheapq \'d2\'f2\'ce\'aa\'b1\'df\'d4\'b5\'bd\'da\'b5\'e3\'b2\'bb\'bf\'c9\'c4\'dc\'b4\'e6\'cb\'ae\'a3\'ac\'c8\'bb\'ba\'f3while heap \'c3\'bf\'b4\'cepop \'d2\'f2\'ce\'aa\'b8\'f9\'be\'dd\'c4\'be\'cd\'b0\'d0\'a7\'d3\'a6\'a3\'ac\'b1\'bb\'b0\'fc\'ce\'a7\'b5\'c4\'bd\'da\'b5\'e3\'d6\'bb\'c4\'dc\'b4\'e6\'cb\'fc\'d6\'dc\'ce\'a7\'d7\'ee\'b0\'ab\'c4\'c7\'b8\'f6\'bd\'da\'b5\'e3\'b8\'df\'b6\'c8\'b5\'c4\'cb\'ae\'a3\'ac\'cb\'f9\'d2\'d4\'d3\'c3heapq.pop\'b3\'f6h\'d7\'ee\'d0\'a1\'b5\'c4 \'c8\'bb\'ba\'f3ans\'bc\'d3 \'c8\'bb\'ba\'f3 \'d5\'e2\'b8\'f6\'b1\'bb\'b0\'fc\'ce\'a7\'b5\'c4\'bd\'da\'b5\'e3\'d3\'c3\'b9\'fd\'c1\'cb\'a3\'ac\'be\'cdpush\'cb\'fc\'bd\'f8\'c8\'ebheap \'b5\'b1\'d7\'f7\'c6\'e4\'cb\'fb\'bd\'da\'b5\'e3\'b5\'c4\'cd\'e2\'ce\'a7\'a3\'ac\'b5\'ab\'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'bd\'da\'b5\'e3\'b1\'c8\'cb\'fc\'d6\'dc\'ce\'a7\'b6\'bc\'b8\'df\'bf\'cf\'b6\'a8\'b4\'e6\'b2\'bb\'c1\'cb\'cb\'ae\'a3\'ac\'cb\'f9\'d2\'d4push \'bd\'f8\'c8\'a5\'b5\'c4\'ca\'c7max\'a3\'a8h\'a3\'ac\'cb\'fc\'b1\'be\'c9\'ed\'b5\'c4\'b8\'df\'b6\'c8\'a3\'a9\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'daheightmap\'c0\'ef\'c9\'e8\'d6\'c3\'cb\'fc\'ce\'aa-1\'a3\'ac\'d2\'f2\'ce\'aa\'b1\'e3\'c0\'fb\'b9\'fd\'c1\'cb\
410. Split Array Largest Sum\
Binary search \
subarry \'b5\'c4sum \'d7\'ee\'b4\'f3\'ca\'c7sum\'a3\'a8nums\'a3\'a9\'d7\'ee\'d0\'a1 max\'a3\'a8nums\'a3\'a9 \'bc\'d9\'c9\'e8midpoint \'be\'cd\'ca\'c7\'c4\'c7\'b8\'f6\'d6\'b5 for num in nums tmpsum+=num if tmpsum>midpoint tmpsum=sum count+=1 \'c8\'e7\'b9\'fbcount \'d6\'b5\'d0\'a1\'d3\'dam \'cb\'b5\'c3\'f7mid\'d6\'b5\'b4\'f3\'c1\'cb \'b7\'b4\'d6\'ae\'d0\'a1\'c1\'cb \'bc\'cc\'d0\'f8search\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 416. Partition Equal Subset Sum   \
it's the same as the 1-D DP of knapsack but replace the maximum with OR as we just want to know if the bag can contain exactly the same amount as claimed.\
\'d1\'ad\'bb\'b7\'cb\'f9\'d3\'d0num dp=[1]+[0]*target \'a3\'ac\'b8\'f8\'b6\'a8\'cc\'d8\'b6\'a8\'d6\'b5 \'d2\'aa\'b8\'d5\'ba\'c3\'d7\'b0\'c2\'fa \'bf\'b4\'cb\'fb\'ca\'c7\'b7\'f1\'b4\'e6\'d4\'dadp[s-num] \'c8\'e7\'b9\'fbdp[s-num]=1 \'c4\'c7\'d5\'a6\'b4\'cbnum\'b5\'c4\'d1\'ad\'bb\'b7\'cf\'c2 dp[s]=1 \'c9\'e8\'d6\'c3dp[0]=1\'d2\'f2\'ce\'aa\'d4\'danum\'c0\'ef\'b5\'c4\'ca\'fd\'d7\'d6dp[num-num]=dp[0]=1\
\pard\pardeftab720\sl340\partightenfactor0
\cf0 417. Pacific Atlantic Water Flow:\
BFS \'ba\'cd DFS \'b6\'bc\'c4\'dc\'d7\'f6  \'bb\'ee\'d3\'c3dfs \'ba\'cdbfs \'b2\'bb\'c4\'d1 \'a3\'a8\'c1\'bd\'b8\'f6set \'bf\'c9\'d2\'d4\'d3\'c3& \'d5\'d2\'b5\'bd\'b9\'ab\'b9\'b2\'d4\'aa\'cb\'d8\'a3\'a9\
419. Battleships in a Board   \
 Since there must be '.' between any two battleships, we can count battleships by counting their top-left corner's 'X'.That is, board[i][j]=='X' and (not i or board[i-1][j]=='.') and (not j or board[i][j-1]=='.')).If a board[i][j] == 'X' but its either left or above cell is also an 'X', then it must be a part of a battleship that we have already counted by counting its top-left 'X'. So we don't count this kind of 'X'.\
421. Maximum XOR of Two Numbers in an Array\
\'bb\'ee\'d3\'c3zip  \
if L = 5, then 3 = [0, 0, 0, 1, 1], so the steps to get there are: \'bb\'ee\'d3\'c3Trie \'b2\'e9\'d1\'af\'ca\'f7 \'d5\'d2\'be\'a1\'bf\'c9\'c4\'dc\'b6\'e0\'b5\'c4\'cf\'e0\'b7\'b4bit \'c8\'f4\'b9\'fb\'c3\'bb\'d3\'d01-bit \'be\'cd \'b0\'b4bit \'cd\'f9\'cf\'c2\'d5\'d5\
# (3 >> 4) & 1 = 0\
# (3 >> 3) & 1 = 0\
# (3 >> 2) & 1 = 0\
# (3 >> 1) & 1 = 1\
# (3 >> 0) & 1 = 1\
\
424. Longest Repeating Character Replacement  \
silding window\'a3\'bastart end  (\'b7\'c7\'b3\'a3\'d6\'d8\'d2\'aa \'d2\'aa\'bc\'c7\'c2\'bcwindow\'c0\'ef\'b3\'f6\'cf\'d6\'d7\'ee\'b6\'e0\'b4\'ce\'b5\'c4\'d7\'d6\'c4\'b8\'b4\'ce\'ca\'fd)\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 426. Convert Binary Search Tree to Sorted Doubly Linked List\
\'c9\'e8\'d6\'c3lhead ltail rhead rtail     cur.left=ltail head=lhead cur.right=rhead, tail=rtail\
\'b5\'dd\'b9\'e9\
\pard\pardeftab720\sl340\partightenfactor0
\cf0 \
437. Path Sum III\
\'bb\'ee\'d3\'c3dict dict\'b4\'e6\'c3\'bf\'b4\'ce\'b5\'dd\'d4\'f6\'b5\'c4\'ca\'fd\'d6\'b5dfs\'b5\'bd\'c4\'b3\'d2\'bb\'b8\'f6\'b5\'e3\'b5\'c4\'d6\'b5-target \'d4\'da\'d7\'d6\'b5\'e4\'c0\'ef\'b5\'c4\'ca\'fd \'d2\'d4\'d5\'e2\'b8\'f6node\'ce\'aa\'bd\'e1\'ca\'f8\'b5\'e3 \'d7\'dc\'ba\'cd\'ce\'aatarget\'b5\'c4path\'b5\'c4\'ca\'fd\'c1\'bf\
\
\pard\pardeftab720\sl340\partightenfactor0
\cf2 438. Find All Anagrams in a String  \
\'d3\'d0\'d7\'d6\'c4\'b8string\'b5\'c4\'ca\'b1\'ba\'f2 \'bb\'ee\'d3\'c3[0]*26 ord \'a3\'ac\'bb\'ac\'b6\'af\'b4\'b0\'bf\'da\'a3\'ac\'c3\'bf\'b4\'ce\'d6\'bb\'b8\'c4\'b1\'e42\'b8\'f6\'d6\'b5\'a3\'ac\'d2\'c6\'c8\'a5\'d6\'ae\'c7\'b0\'b5\'c4\'bf\'aa\'cd\'b7\'a3\'ac\'ba\'cd\'b4\'b0\'bf\'da\'c4\'a9\'ce\'b2\'bc\'d3\'c8\'eb\'d2\'bb\'b8\'f6\cf0 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 442. Find All Duplicates in an Array\
\'d2\'f2\'ce\'aa0<a[I]<=n \'cb\'f9\'d2\'d4\'bf\'c9\'d2\'d4\'c0\'fb\'d3\'c3index \'c3\'bb\'d3\'f6\'b5\'bd\'d2\'bb\'b8\'f6n \'d4\'f2 indx = abs(n)-1 num[index]\'b1\'e4\'b3\'c9\'b8\'ba\'b5\'c4 \'c8\'e7\'b9\'fb \'d3\'f6\'b5\'bd\'cd\'ac\'d1\'f9\'b5\'c4index \'d4\'f2\'b2\'e9\'bf\'b4\'b5\'c4\'ca\'b1\'ba\'f2\'bb\'e1\'b7\'a2\'cf\'d6 index\'cb\'f9\'b4\'a6\'b5\'c4\'ca\'fd\'d4\'da\'d6\'ae\'c7\'b0\'b1\'bbmodify \'b9\'fd\'c1\'cb \'cb\'f9\'d2\'d4 \'b4\'f0\'b0\'b8append \'d5\'e2\'b8\'f6\'ca\'fd\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 450. Delete Node in a BST\cf0 \
\pard\pardeftab720\sl340\partightenfactor0
\cf0 472. Concatenated Words\
Dfs \'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6word\'b5\'c4prefix \'d4\'dawords\'c0\'ef \'be\'cd\'c5\'d0\'b6\'cf\'ca\'c7\'b7\'f1\'cb\'fb\'b5\'c4\'ba\'f3\'c3\'e6\'d5\'e2\'d0\'a9\'d2\'b2\'d4\'dawords\'c0\'ef \'c8\'e7\'b9\'fb\'d4\'da \'be\'cd\'ca\'c7\'c1\'bd\'b8\'f6\'b5\'a5\'b4\'ca\'b5\'c4\'c7\'e9\'bf\'f6\'d6\'b1\'bd\'d3return True \'c8\'e7\'b9\'fb\'b2\'bb\'ca\'c7\'d4\'f2\'b5\'dd\'b9\'e9dfs(\'ba\'f3\'c3\'e6\'b5\'c4)\
\'d2\'f2\'ce\'aa\'d3\'d0\'bf\'c9\'c4\'dc\'ca\'c7\'d3\'c93-n\'b8\'f6\'b5\'a5\'b4\'ca\'d7\'e9\'b3\'c9 \'d6\'bb\'d2\'aa\'b4\'f3\'d3\'da2\'b8\'f6 \'be\'cd\'bb\'e1return True\
491,Increasing Subsequences\
Trick \'d3\'c3\'d7\'d6\'b5\'e4\'bc\'c7\'c2\'bcused \'b9\'fd\'b5\'c4\'ca\'fd\'d7\'d6\'a3\'ac res.append(path[:]) \'d2\'f2\'ce\'aapath \'ca\'b1\'bf\'cc\'d3\'d0\'bf\'c9\'c4\'dc\'d4\'da\'b1\'e4\'bb\'af\
\'d5\'fb\'cc\'e5\'b9\'fd\'b3\'cc  recursion \'b5\'b1path\'b3\'a4\'b6\'c8\'b4\'f3\'d3\'da2 \'be\'cdappend\
\'c3\'bf\'b4\'ce\'bc\'c7\'c2\'bc\'d3\'c3\'b9\'fd\'b5\'c4\'ca\'fd\'d7\'d6\
\'b7\'d6\'d6\'a7\
4-46-467\'a3\'ac\'cf\'c2\'d2\'bb\'b8\'f6\'d2\'b2\'ca\'c77\'d3\'c3\'b9\'fd\'c1\'cb\'be\'cdcontinue \'bd\'e1\'ca\'f8back to 46 -4677\
\'c8\'bb\'ba\'f346 \'d5\'e2\'b8\'f6\'b7\'d6\'d6\'a7\'bd\'e1\'ca\'f8\'c1\'cbpop \'b5\'f46 \'c2\'d6\'b5\'bd 47\'a3\'ac 47\'bd\'e1\'ca\'f8\'c1\'cbpop\'b5\'f4 7 \'a3\'ac\'d6\'ae\'ba\'f37 \'d3\'d6\'d3\'c3\'c5\'b7\'c1\'cb \'bd\'d3\'d7\'c5pop\'b5\'f4 \'cb\'f9\'d2\'d4 4 \'d5\'e2\'b8\'f6\'b7\'d6\'d6\'a7\'bd\'e1\'ca\'f8 pop\'b5\'f44 \'bd\'d3\'d7\'c5append 6 \
494. Target Sum\
DP \'b2\'bb\'cd\'a3\'b8\'fc\'bb\'bbhashtable ex \'bc\'c7\'c2\'bc\'cb\'f9\'d3\'d0\'b7\'d6\'d6\'a7\'b5\'c4\'d6\'b5 \'ba\'cd\'d7\'e9\'ba\'cf\'b3\'c9\'d5\'e2\'b8\'f6\'d6\'b5\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'fd \'d2\'c0\'b4\'ce\'c0\'db\'bc\'d3\'a1\'a3\
n=len(nums) n==1\'ca\'b1 \'d6\'b5\'d6\'bb\'d3\'d0-1\'a3\'ac1  \'d6\'ae\'ba\'f3 \'d4\'d9\'c0\'b4\'d2\'bb\'b8\'f61 \'be\'cd\'bb\'e1\'ca\'c7 -2\'a3\'ba1 0\'a3\'ba2 2\'a3\'ba2  \'d4\'d9\'c0\'b4\'d2\'bb\'b8\'f6 -3 -1 1 3 \'d4\'da\'c3\'bf\'b8\'f6\'b7\'d6\'d6\'a7\'cf\'c2\'d4\'d9\'c0\'b4\'d2\'bb\'b8\'f61 \'d3\'d6\'b6\'e0\'b3\'f6\'c1\'bd\'b8\'f6\'b7\'d6\'d6\'a7 \'b5\'ab\'d2\'bb\'d0\'a9\'b7\'d6\'d6\'a7\'b5\'c4\'d6\'b5\'bb\'e1\'d6\'d8\'b5\'fe\'a3\'ac\'b4\'cb\'ca\'b1\'c0\'db\'bc\'d3\'d5\'e2\'d0\'a9\'cf\'e0\'cd\'ac\'d6\'b5\'b5\'c4\'b7\'d6\'d6\'a7\'a3\'ac\'d7\'e9\'b3\'c9\'d0\'c2\'b5\'c4dic\'ce\'aa\'cf\'c2\'b4\'ce\'d1\'ad\'bb\'b7\'ca\'b9\'d3\'c3\
\pard\pardeftab720\sl340\partightenfactor0
\cf2 518. Coin Change 2\
\'d1\'ad\'bb\'b7\'c3\'bf\'b8\'f6coin\'a3\'ba\'d4\'da\'d5\'e2\'b8\'f6\'d1\'ad\'bb\'b7\'cf\'c2\'d4\'d9\'d1\'ad\'bb\'b7coin\'b5\'bdamount\'a3\'ac\'d5\'e2\'d1\'f9\'be\'cd\'b2\'bb\'bb\'e1\'b3\'f6\'cf\'d6\'d6\'d8\'b8\'b4\'a1\'a3\'b5\'b1coin\'ce\'aa1\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'d1\'ad\'bb\'b71-amount \'d5\'e2\'d1\'f9\'b6\'bc\'ca\'c71\'b5\'c4\'d7\'e9\'ba\'cf\'a3\'ac\'d6\'ae\'ba\'f32\'c0\'b4\'b5\'c4\'ca\'b1\'ba\'f2\'d6\'bb\'bb\'e1\'ca\'c72+1\'b5\'c4\'d7\'e9\'ba\'cf\'b2\'bb\'bb\'e1\'d3\'d01+2 \'b5\'c4\'d7\'e9\'ba\'cf\'c1\'cb\
    \
523. Continuous Subarray Sum\cf0  \
\cf2 \'c0\'fb\'d3\'c3\'d3\'e0\'ca\'fd\'c0\'b4\'d7\'f6\'a3\'bas\'c0\'b4\'bc\'c7\'c2\'bc\'c3\'bf\'b4\'ce\'d1\'ad\'bb\'b7\'b5\'c4\'ba\'f3\'b5\'c4\'d7\'dc\'ba\'cd \'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'d7\'dc\'ba\'cd%k \'b5\'c4\'d3\'e0\'ca\'fd \'d4\'dadict \'c0\'ef\'bc\'fb\'b9\'fd \'cb\'b5\'c3\'f7\'ce\'d2\'c3\'c7\'bc\'d3\'c1\'cb\'d2\'bb\'b8\'f6K\'b5\'c4\'b1\'b6\'ca\'fd\'b5\'bds\'c0\'ef \'cb\'f9\'d2\'d4\'bf\'cf\'b6\'a8\'ca\'c7\'d3\'d0subarray \'d6\'ae\'ba\'cd\'ca\'c7k\'b5\'c4\'b1\'b6\'ca\'fd return True Note \'d7\'a2\'d2\'e2
\f2  
\f1 0 \'b5\'c4\'b2\'d9\'d7\'f7 d[0]=-1 \cf0 \
536. Construct Binary Tree from String\
\'d4\'cb\'d3\'c3stack  \'d3\'f6\'b5\'bd \'a3\'a9 \'cb\'b5\'c3\'f7 \'c9\'cf\'d2\'bb\'b8\'f6node \'b5\'c4 \'d7\'f3\'d3\'d2child \'b6\'bc\'c2\'fa\'d7\'e3\'c1\'cb \'cb\'f9\'d2\'d4 stack.pop() elif \'c8\'e7\'b9\'fb\'b2\'bb\'ca\'c7\'a3\'a9\'cb\'b5\'c3\'f7\'d6\'bb\'ca\'c7\'ca\'fd\'d7\'d6 \'b5\'c8\'cf\'c2\'d2\'bb\'b8\'f6\'b2\'bb\'ca\'c7\'ca\'fd\'d7\'d6\'b5\'c4\'ca\'b1\'ba\'f2 TreeNode() \'d5\'e2\'b8\'f6\'ca\'fd\'d7\'d6str\
\'c8\'bb\'ba\'f3\'c8\'e7\'b9\'fb\'c9\'cf\'d2\'bb\'b8\'f6\'c3\'bb\'d3\'d0left child \'c4\'c7\'d5\'e2\'b8\'f6\'be\'cd\'ca\'c7\'c9\'cf\'d2\'bb\'b8\'f6\'b5\'c4left child \'b7\'b4\'d6\'ae \'ca\'c7\'c9\'cf\'d2\'bb\'b8\'f6right child  \'c8\'bb\'ba\'f3 stack.append(\'d5\'e2\'b8\'f6node) num=\'a1\'ae\'a1\'af\
542. 01 Matrix\
BFS \'cf\'c8\'b0\'d1matrix \'c0\'ef\'c3\'e6\'b5\'c8\'d3\'da1\'b5\'c4\'d7\'f8\'b1\'ea\'b7\'c5\'b5\'bdqueue\'c0\'ef  while queue count=len\'a3\'a8queue\'a3\'a9\'d3\'c3\'c0\'b4\'bc\'c6\'cb\'e3l\'b4\'cb\'ca\'b1level\'cf\'c2\'bd\'da\'b5\'e3\'b5\'c4\'b8\'f6\'ca\'fd\
\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'bd\'da\'b5\'e3\'b5\'c4\'c7\'b0\'ba\'f3\'d7\'f3\'d3\'d2\'b5\'c4level\'b6\'bc>=level  matrix[x][y]=level+1 queue.append(x,y) than count-=1 when count =0 start a next round which upper level position\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 556. Next Greater Element III\
\'cf\'c8\'b4\'d3\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'cd\'f9\'c7\'b0\'b1\'e9\'c0\'fa\'d5\'d2\'b5\'bd\'ba\'f3\'d2\'bb\'b8\'f6\'b1\'c8\'c7\'b0\'d2\'bb\'b8\'f6\'b4\'f3\'b5\'c4\'be\'cd\'cd\'a3\'d6\'b9\'a3\'ac\'c7\'b0\'d2\'bb\'b8\'f6\'be\'cd\'ca\'c7\'d2\'aa\'b1\'bb\'cc\'e6\'bb\'bb\'b5\'c4\'c4\'c7\'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'d9\'d4\'da\'d7\'ee\'ba\'f3\'b5\'bd\'d5\'d2\'b5\'bd\'b5\'c4\'c4\'c7\'b8\'f6index \'b1\'e9\'c0\'fa\'a3\'ac\'d7\'ee\'cf\'c8\'d5\'d2\'b5\'bd\'b5\'c4\'b1\'c8\'c4\'c7\'b8\'f6\'b4\'f3\'b5\'c4\'be\'cd\'b0\'d1\'c4\'c7\'c1\'bd\'b8\'f6swap\'a3\'ac\'b5\'c3\'b5\'bd\'bd\'e1\'b9\'fb\'a3\'ac\'b1\'c8\'c8\'e71243 \'cf\'c8\'d5\'d2\'b5\'bd\'b5\'c4\'ca\'c72 \'b5\'ab\'b2\'bb\'c4\'dc\'ba\'cd4\'bb\'bb \'d2\'f2\'ce\'aa3 \'d2\'b2\'b1\'c82\'b4\'f3 \'d7\'ee\'ba\'f3\'b4\'f0\'b0\'b8\'ca\'c71324 \'d2\'f2\'ce\'aa\'d7\'ee\'ba\'f3swap\'cd\'ea\'bb\'b9\'d2\'aasort\'d2\'bb\'cf\'c2\'bb\'b9\'cd\'ea\'d4\'aa\'cb\'d8\'d6\'ae\'ba\'f3\'b5\'c4\'cb\'f9\'d3\'d0\'d4\'aa\'cb\'d8\
\
560. Subarray Sum Equals K :\
\'c3\'bf\'b4\'ce\'bc\'c7\'c2\'bc\'cb\'f9\'bc\'d3\'ba\'cd\'b5\'c4\'d6\'b5 \'d3\'f6\'b5\'bd\'cf\'e0\'cd\'ac\'b5\'c4count+=1\
\'c3\'bb\'b4\'ce\'b5\'fc\'b4\'fa \'b6\'bc\'d5\'d2\'d2\'bb\'cf\'c2\'ca\'c7\'b7\'f1cur_sum-k \'ca\'c7\'b7\'f1\'d4\'dadic\'c0\'ef \'d4\'da\'b5\'c4\'bb\'b0\'d6\'b1\'bd\'d3\'bc\'d3\'cb\'fb\'b5\'c4count\
Let's remember count[V], the number of previous prefix sums with value V. If our newest prefix sum has value W, and W-V == K, then we add count[V] to our answer.\
This is because at time t, A[0] + A[1] + ... + A[t-1] = W, and there are count[V] indices j with j < t-1 and A[0] + A[1] + ... + A[j] = V. Thus, there are count[V] subarrays A[j+1] + A[j+2] + ... + A[t-1] = K.\
611. Valid Triangle Number   \
\pard\pardeftab720\sl340\partightenfactor0
\cf0 \'cf\'c8\'c5\'c5\'d0\'f2\'a3\'ac\'b0\'d1 num \'c5\'aa\'b3\'c9 asceding order \'c8\'bb\'ba\'f3\'b4\'d3\'b4\'f3\'b5\'bd\'d0\'a1\'b1\'e9\'c0\'fa\'a3\'ac\'b5\'da\'d2\'bb\'b1\'df\'b5\'c4index=0 \'b5\'da\'b6\'fe\'b8\'f6\'b1\'df\'b5\'c4index=i-1 \'d5\'e2\'d1\'f9\'b5\'c4\'bb\'b0 \'d6\'bb\'d2\'aa\'d5\'e2\'b8\'f6\'c2\'fa\'d7\'e3\'d4\'f2 \'b5\'da\'d2\'bb\'b8\'f6\'b1\'df\'b5\'bd\'b5\'da\'b6\'fe\'b8\'f6\'b1\'df\'b5\'c4\'cb\'f9\'d3\'d0index\'b5\'c4\'b1\'df\'b6\'bc\'c2\'fa\'d7\'e3 \'bc\'d3\'b5\'bd\'bd\'e1\'b9\'fb\'c0\'ef \'a3\'ac\'d6\'ae\'ba\'f3 \'b5\'da\'b6\'fe\'b1\'df\'b5\'c4index-1 \'b1\'e4\'d0\'a1\'d2\'bb\'cf\'c2\'d7\'f6\'d6\'d8\'b8\'b4\'b2\'d9\'d7\'f7\'a3\'ac\'cd\'ac\'d1\'f9 \'b2\'bb\'c2\'fa\'d7\'e3\'b5\'c4\'bb\'b0\'cb\'b5\'c3\'f7\'b5\'da\'d2\'bb\'b1\'df\'d0\'a1\'c1\'cb\'a3\'ac\'cb\'fc\'b5\'c4index+1 \'be\'cd\'bf\'c9\'d2\'d4\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 636. Exclusive Time of Functions :\
\'c0\'fb\'d3\'c3stack\'a1\'a1\'a3\'ac stack\'c0\'ef\'d6\'bb\'b4\'e6sign \'ca\'c7 start \'b5\'c4 time \'ba\'cd ID: \'b1\'e9\'c0\'fa\'d5\'fb\'b8\'f6logs\'a3\'ac\'c8\'e7\'b9\'fb\'ca\'c7start\'a3\'ac\'be\'cdappend\'b5\'bdstack\'c0\'ef \'c7\'d2 stack\'c0\'ef\'b5\'c4\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6 \'d2\'b2\'be\'cd\'ca\'c7\'c7\'b0\'d2\'bb\'b8\'f6start\'b5\'c4id\'cb\'f9last\'b5\'c4\'ca\'b1\'bc\'e4=\'cf\'d6\'d4\'da\'b5\'c4\'ca\'b1\'bc\'e4\'b5\'e3-\'c9\'cf\'b4\'cestart\'bd\'e1\'ca\'f8\'b5\'c4\'ca\'b1\'bc\'e4\'b5\'e3\'a1\'a3 \'c8\'e7\'b9\'fb\'ca\'c7end\'a3\'ac\'d4\'f2pop\'b3\'f6\'c0\'b4\'c9\'cf\'b4\'cestart\'bf\'aa\'ca\'bc\'b5\'c4\'ca\'b1\'bc\'e4\'b5\'e3 res[id]+=time-pretime+1 \uc0\u160 \'c7\'d2 \'c7\'b0\'d2\'bb\'b8\'f6start\'b5\'c4\'ca\'b1\'bc\'e4\'b5\'e3\'d2\'c6\'b5\'bd\'b4\'cbendpoint\'b5\'c4\'ca\'b1\'bc\'e4\'b5\'e3+1\
652. Find Duplicate Subtrees\
\pard\pardeftab720\sl340\partightenfactor0
\cf0 \'c0\'fb\'d3\'c3\'d7\'d6\'b5\'e4\'a3\'ac\'c7\'d2path=str(root.val)+dfs(root.left)+dfs(root.right) dic[path]+=1\
\
\pard\pardeftab720\sl340\partightenfactor0

\fs26 \cf0 \
\pard\pardeftab720\sl360\partightenfactor0

\f4 \cf5 \cb6 \expnd0\expndtw0\kerning0
673.\'a0Number of Longest Increasing Subsequence
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 class Solution:\
    def findNumberOfLIS(self, nums: List[int]) -> int:\
        sub=[]\
        num_max=[]\
        dic=collections.defaultdict(list)\
        for num in nums:\
            index=bisect.bisect_left(sub,num)\
            if len(sub)==index:\
                sub.append(num)\
            else:\
                sub[index]=num\
            \
            dic[index].append((sum(lens if max_<num  else 0 for lens,max_ in dic[index-1]) or 1 ,num))#dp\
        return sum(i for i,_ in dic[len(sub)-1])\
694	Number of Distinct Islands\
\'c5\'d0\'b6\'cf\'ca\'c7\'b7\'f1\'c1\'bd\'b8\'f6\'d0\'a1\'b5\'ba\'d2\'bb\'d1\'f9 [(2,3),(3,3),(2,4),(3,4)]-(2,3)=[(0,0),(1,0),(1,0),(1,1)]\
739. Daily Temperatures\
\'c0\'fb\'d3\'c3stack \'b5\'b9\'d0\'f0\'b1\'e9\'c0\'fa,stack.append(i) \'a3\'ac\'c8\'e7\'b9\'fbstack[-1]\'c0\'ef\'b4\'e6\'b5\'c4index \'cb\'f9\'b4\'a6\'b5\'c4\'d6\'b5\'d0\'a1\'d3\'da\'ce\'d2\'cb\'f9\'b1\'e9\'c0\'fa\'b5\'bd\'b5\'c4\'d6\'b5\'a3\'ac\'c4\'c7\'be\'cd\'d2\'bb\'d6\'b1pop \'d6\'b1\'b5\'bd\'d5\'d2\'b5\'bd\'b1\'c8\'ce\'d2\'cf\'d6\'d4\'da\'d6\'b5\'b4\'f3\'b5\'c4\'a3\'ac\'c3\'bb\'d3\'d0\'b5\'c4\'bb\'b0\'a3\'ac\'be\'cd\'b2\'bb\'b8\'c4\'b1\'e4ans\'b5\'c4\'d6\'b5\
\
763. Partition Labels\
Sliding window, \'ce\'aa\'c1\'cb\'be\'a1\'bf\'c9\'c4\'dc\'b0\'d1\'d4\'aa\'cb\'d8\'b7\'c5\'b5\'bd\'cd\'ac\'d2\'bb\'b8\'f6sequence\'c0\'ef\'a3\'aclast=\{c:i for I in enumerate(S)\}, \'b5\'dd\'b9\'e9\'c3\'bf\'b4\'ce\'b3\'f6\'cf\'d6\'b5\'c4\'d7\'d6\'c4\'b8\'b5\'c4\'cf\'c2\'b1\'ea\'c8\'e7\'b9\'fb\'ca\'c7last\'b5\'c4\'c4\'c7\'b8\'f6\'cf\'c2\'b1\'ea\'a3\'ac\'c4\'c7\'be\'cdappend\'bd\'f8\'c8\'ebres end-start+1.   Hint: end=max(end,last(c)) \uc0\u160 \'ce\'aa\'c1\'cb\'c8\'c3\'c4\'c7\'b8\'f6end\'d6\'b5\'d7\'ee\'b4\'f3 \'ce\'aa\'c1\'cb\'c8\'c3\'c0\'ef\'c3\'e6\'b5\'c4\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'b4\'ce\'ca\'fd\'d7\'ee\'b6\'e0\
767. Reorganize String\
\'ca\'b9\'d3\'c3heap \'b4\'e6\'b3\'f6\'cf\'d6\'b5\'c4\'c6\'b5\'c2\'ca \'ba\'cd\'d7\'d6\'c4\'b8 \'cf\'c8pop\'b3\'f6\'b3\'f6\'cf\'d6\'c6\'b5\'c2\'ca\'d7\'ee\'b4\'f3\'b5\'c4\'d7\'d6\'c4\'b8 \'c8\'bb\'ba\'f3\'d3\'c3\'b3\'f6\'cf\'d6\'c6\'b5\'c2\'ca\'c6\'e4\'b4\'ce\'b5\'c4 \'bd\'ab\'c6\'b5\'c2\'ca\'d7\'ee\'b4\'f3\'b5\'c4modify i.e aaabb \'a1\'aa> ababa  \'bd\'ab\'b6\'e0\'b3\'f6\'b5\'c4push \'bd\'f8heap\
\'bd\'f8\'d0\'d0\'cf\'c2\'b4\'ce\'d1\'ad\'bb\'b7 \'d7\'a2\'d2\'e2\'d7\'ee\'ba\'f3pop\'b3\'f6\'b5\'c4\'d7\'d6\'c4\'b8 \'c8\'e7\'b9\'fb\'b3\'f6\'cf\'d6\'b5\'c4\'c6\'b5\'c2\'ca\'ca\'c71 \'d4\'f2\'bc\'d3\'c8\'eb\'b5\'bd\'bd\'e1\'b9\'fb\'d6\'d0 \'a3\'ac\'c8\'e7\'b9\'fb\'b4\'f3\'d3\'da\'d2\'bb \'cb\'b5\'c3\'f7\'c3\'bb\'b0\'ec\'b7\'a8modify\'c1\'cb return \'a1\'b0 \'a1\'b1\'a1\'a1\
801. Minimum Swaps To Make Sequences Increasing \
DP : noswap=[0]*n swap=[0]*n.    \uc0\u160 For I in range(1,n).     \
strictly_increasing=A[i]>A[i-1] and B[i]>B[i-1]\
strictly_xincreasing=A[i]>B[i-1] and B[i]>A[i-1]\
\'a1\'ad\'a1\'ad\'a1\'ad\
881. Boats to Save People \
Two Points \'d2\'f2\'ce\'aa\'d7\'ee\'b6\'e0\'c1\'bd\'b8\'f6\'c8\'cb\
997 Find the Town Judge\
  \
\'c9\'e8\'b6\'a8\'d2\'bb\'b8\'f6\'b7\'d6\'ca\'fd \'b1\'bb\'c8\'cf\'ca\'b6-1\'b7\'d6 \'c8\'cf\'ca\'b6\'b5\'c4\'c4\'c7\'b8\'f6\'c8\'cb\'bc\'d3\'d2\'bb\'b7\'d6\
\'b5\'b1\'d7\'d4\'bc\'ba\'b5\'c4\'b7\'d6\'ca\'fd\'ca\'c7N-1\'ca\'b1\'c4\'c7\'bf\'cf\'b6\'a8\'be\'cd\'ca\'c7\'b7\'a8\'b9\'d9\'a3\'ac\'b2\'bb\'ca\'c7return -1\
1004 Max Consecutive Ones\
sliding window\
\
1008. Construct Binary Search Tree from Preorder Traversal\
\'cd\'a8\'b9\'fdbinary search \'d5\'d2\'b5\'bd\'b1\'c8root \'b4\'f3\'b5\'c4node \'d2\'b2\'ca\'c7\'d3\'d2\'bd\'da\'b5\'e3\'b5\'c4\'bf\'aa\'ca\'bc \'c8\'bb\'ba\'f3 \'c5\'d0\'b6\'cf \'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'bf\'aa\'ca\'bc\'b5\'c4\'bd\'da\'b5\'e3\'b1\'c8root\'d0\'a1 \'cb\'b5\'c3\'f7\'c3\'bb\'d3\'d0\'d3\'d2\'bd\'da\'b5\'e3\'c1\'cb \'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0 \'d4\'f2root\'a1\'a3left\'ca\'c7\'bd\'da\'b5\'e3\'d6\'ae\'c7\'b0\
root\'a1\'a3right \'ca\'c7\'d5\'e2\'b8\'f6\'bd\'da\'b5\'e3\'d6\'ae\'ba\'f3\
\
1019. Next Greater Node In Linked List\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 503. Next Greater Element II\
\'b6\'bc\'ca\'c7\'d2\'bb\'b8\'f6\'b5\'c0\'c0\'ed\'a3\'ac\'c9\'e8\'d6\'c3cache \'c0\'ef\'c3\'e6\'cf\'c8\'c9\'e8\'d6\'c3\'c8\'ab0\'bb\'f2\'d5\'df\'c8\'ab1\'b4\'fa\'b1\'ed\'c3\'bb\'d5\'d2\'b5\'bdnext greater \'c9\'e8\'d6\'c3\'b8\'f6\'bf\'d5 stack \'c8\'bb\'ba\'f3\'b1\'e9\'c0\'fa stack\'c0\'ef\'b4\'e6\'c3\'bf\'b4\'ce\'d3\'f6\'b5\'bd\'b5\'c4num\'b5\'c4index \'cf\'e0\'b5\'b1\'d3\'da\'b6\'d4\'d6\'ae\'c7\'b0\'b5\'c4\'bc\'c7\'c2\'bc\
\'c8\'e7\'b9\'fb\'d3\'f6\'b5\'bd\'d2\'bb\'b8\'f6num \'b1\'c8stack\'c0\'ef\'d7\'ee\'ba\'f3\'c3\'e6\'b5\'c4index\'b5\'c4num\'b4\'f3 \'d4\'f2\'d4\'dacache\'c0\'ef\'b8\'c4 \'d3\'c3while \'d6\'b1\'b5\'bdpop\'b5\'f4stack\'c0\'ef\'d6\'ae\'c7\'b0\'cb\'f9\'d3\'d0\'b1\'c8\'cf\'d6\'d4\'da\'d5\'e2\'b8\'f6num\'d0\'a1\'b5\'c4index\
\'c8\'e7\'b9\'fb\'ca\'c7503 \'d6\'b1\'bd\'d3\'d1\'ad\'bb\'b7\'c1\'bd\'b4\'ce\'be\'cd\'d0\'d0\
\
 1202. Smallest String With Swaps\
Union find\
\
}